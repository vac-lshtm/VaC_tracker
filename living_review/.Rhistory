library(medrxivr)
# search medrxiv
if (!("mx_reduced.csv" %in% list.files())) {
term1 <- c("[Cc]oronavirus","COVID*","SARS*") # OR
term2 <- c("[Vv]accin*") # OR
term3 <- c("[Tt]rial", "[Pp]hase") # OR
query <- list(term1, term2, term3) # AND
mx_results <- mx_search(data = mx_snapshot(), query = query, from_date = "2020-01-01", to_date = "2021-03-08") ### UPDATE ###
mx_reduced = mx_results %>% select(c(ID, title, abstract, date, doi, author_corresponding,
author_corresponding_institution))
mx_reduced$source = "medrxiv"
write.csv(mx_reduced, "mx_reduced.csv")
} else { mx_reduced = read.csv("mx_reduced.csv", row.names=1) }
# search pubmed
if (!("pubmed_1.csv" %in% list.files())) {
query <- "(coronavirus OR COVID OR SARS*) AND vaccin* AND (trial OR phase) AND 2020/01/01:2020/06/01[crdt]"
pm_download <- batch_pubmed_download(pubmed_query_string = query, encoding = "ASCII")
pm_df1 <- table_articles_byAuth(pubmed_data = pm_download[[1]], included_authors = "first", encoding = "ASCII")
write.csv(pm_df1, "pubmed_1.csv")
} else { pm_df1 = read.csv("pubmed_1.csv", row.names=1) }
# search part 2
if (!("pubmed_2.csv" %in% list.files())) {
query <- "(coronavirus OR COVID OR SARS*) AND vaccin* AND (trial OR phase) AND 2020/06/02:2020/08/01[crdt]"
pm_download <- batch_pubmed_download(pubmed_query_string = query, encoding = "ASCII")
pm_df2 <- table_articles_byAuth(pubmed_data = pm_download[[1]], included_authors = "first", encoding = "ASCII")
write.csv(pm_df2, "pubmed_2.csv")
} else { pm_df2 = read.csv("pubmed_2.csv", row.names=1) }
# search part 3
if (!("pubmed_3.csv" %in% list.files())) {
query <- "(coronavirus OR COVID OR SARS*) AND vaccin* AND (trial OR phase) AND 2020/08/02:2020/11/01[crdt]"
pm_download <- batch_pubmed_download(pubmed_query_string = query, encoding = "ASCII")
pm_df3 <- table_articles_byAuth(pubmed_data = pm_download[[1]], included_authors = "first", encoding = "ASCII")
write.csv(pm_df3, "pubmed_3.csv")
} else { pm_df3 = read.csv("pubmed_3.csv", row.names=1) }
# search part 4
if (!("pubmed_4.csv" %in% list.files())) {
query <- "(coronavirus OR COVID OR SARS*) AND vaccin* AND (trial OR phase) AND 2020/11/02:2021/03/08[crdt]" ### UPDATE ###
pm_download <- batch_pubmed_download(pubmed_query_string = query, encoding = "ASCII")
pm_df4 <- table_articles_byAuth(pubmed_data = pm_download[[1]], included_authors = "first", encoding = "ASCII")
write.csv(pm_df4, "pubmed_4.csv")
} else { pm_df4 = read.csv("pubmed_4.csv", row.names=1) }
# merge results
pm_df = rbind(pm_df1, pm_df2, pm_df3, pm_df4)
pm_results <- data.frame(
ID = pm_df$pmid,
title = pm_df$title,
abstract = pm_df$abstract,
date = paste0(pm_df$year,"-",pm_df$month,"-",pm_df$day),
doi = pm_df$doi,
author_corresponding = paste(pm_df$firstname,pm_df$lastname),
author_corresponding_institution = pm_df$address,
source = "pubmed"
)
# collate results
collated = rbind(mx_reduced, pm_results)
write.csv(collated, "pre_abstract_screening_08Mar2021_full.csv")  ### UPDATE ###
#system("rm pubmed_*")
#system("rm mx_reduced*")
#system("rm easyPubMed_data_01.txt*")
sum(collated$source=="pubmed")
sum(collated$source=="medrxiv")
# load packages
library(easyPubMed)
library(dplyr)
library(formattable)
library(medrxivr)
# search medrxiv
if (!("mx_reduced.csv" %in% list.files())) {
term1 <- c("[Cc]oronavirus","COVID*","SARS*") # OR
term2 <- c("[Vv]accin*") # OR
term3 <- c("[Tt]rial", "[Pp]hase") # OR
query <- list(term1, term2, term3) # AND
mx_results <- mx_search(data = mx_snapshot(), query = query, from_date = "2020-01-01", to_date = "2021-03-08") ### UPDATE ###
mx_reduced = mx_results %>% select(c(ID, title, abstract, date, doi, author_corresponding,
author_corresponding_institution))
mx_reduced$source = "medrxiv"
write.csv(mx_reduced, "mx_reduced.csv")
} else { mx_reduced = read.csv("mx_reduced.csv", row.names=1) }
# search pubmed
if (!("pubmed_1.csv" %in% list.files())) {
query <- "(coronavirus OR COVID OR SARS*) AND vaccin* AND (trial OR phase) AND 2020/01/01:2020/06/01[crdt]"
pm_download <- batch_pubmed_download(pubmed_query_string = query, encoding = "ASCII")
pm_df1 <- table_articles_byAuth(pubmed_data = pm_download[[1]], included_authors = "first", encoding = "ASCII")
write.csv(pm_df1, "pubmed_1.csv")
} else { pm_df1 = read.csv("pubmed_1.csv", row.names=1) }
# search part 2
if (!("pubmed_2.csv" %in% list.files())) {
query <- "(coronavirus OR COVID OR SARS*) AND vaccin* AND (trial OR phase) AND 2020/06/02:2020/08/01[crdt]"
pm_download <- batch_pubmed_download(pubmed_query_string = query, encoding = "ASCII")
pm_df2 <- table_articles_byAuth(pubmed_data = pm_download[[1]], included_authors = "first", encoding = "ASCII")
write.csv(pm_df2, "pubmed_2.csv")
} else { pm_df2 = read.csv("pubmed_2.csv", row.names=1) }
# search part 3
if (!("pubmed_3.csv" %in% list.files())) {
query <- "(coronavirus OR COVID OR SARS*) AND vaccin* AND (trial OR phase) AND 2020/08/02:2020/11/01[crdt]"
pm_download <- batch_pubmed_download(pubmed_query_string = query, encoding = "ASCII")
pm_df3 <- table_articles_byAuth(pubmed_data = pm_download[[1]], included_authors = "first", encoding = "ASCII")
write.csv(pm_df3, "pubmed_3.csv")
} else { pm_df3 = read.csv("pubmed_3.csv", row.names=1) }
# search part 4
if (!("pubmed_4.csv" %in% list.files())) {
query <- "(coronavirus OR COVID OR SARS*) AND vaccin* AND (trial OR phase) AND 2020/11/02:2021/03/08[crdt]" ### UPDATE ###
pm_download <- batch_pubmed_download(pubmed_query_string = query, encoding = "ASCII")
pm_df4 <- table_articles_byAuth(pubmed_data = pm_download[[1]], included_authors = "first", encoding = "ASCII")
write.csv(pm_df4, "pubmed_4.csv")
} else { pm_df4 = read.csv("pubmed_4.csv", row.names=1) }
# merge results
pm_df = rbind(pm_df1, pm_df2, pm_df3, pm_df4)
pm_results <- data.frame(
ID = pm_df$pmid,
title = pm_df$title,
abstract = pm_df$abstract,
date = paste0(pm_df$year,"-",pm_df$month,"-",pm_df$day),
doi = pm_df$doi,
author_corresponding = paste(pm_df$firstname,pm_df$lastname),
author_corresponding_institution = pm_df$address,
source = "pubmed"
)
# collate results
collated = rbind(mx_reduced, pm_results)
write.csv(collated, "pre_abstract_screening_08Mar2021_full.csv")  ### UPDATE ###
#system("rm pubmed_*")
#system("rm mx_reduced*")
#system("rm easyPubMed_data_01.txt*")
# load packages
library(easyPubMed)
library(dplyr)
library(formattable)
library(medrxivr)
# search medrxiv
if (!("mx_reduced.csv" %in% list.files())) {
term1 <- c("[Cc]oronavirus","COVID*","SARS*") # OR
term2 <- c("[Vv]accin*") # OR
term3 <- c("[Tt]rial", "[Pp]hase") # OR
query <- list(term1, term2, term3) # AND
mx_results <- mx_search(data = mx_snapshot(), query = query, from_date = "2020-01-01", to_date = "2021-03-15") ### UPDATE ###
mx_reduced = mx_results %>% select(c(ID, title, abstract, date, doi, author_corresponding,
author_corresponding_institution))
mx_reduced$source = "medrxiv"
write.csv(mx_reduced, "mx_reduced.csv")
} else { mx_reduced = read.csv("mx_reduced.csv", row.names=1) }
# search pubmed
if (!("pubmed_1.csv" %in% list.files())) {
query <- "(coronavirus OR COVID OR SARS*) AND vaccin* AND (trial OR phase) AND 2020/01/01:2020/06/01[crdt]"
pm_download <- batch_pubmed_download(pubmed_query_string = query, encoding = "ASCII")
pm_df1 <- table_articles_byAuth(pubmed_data = pm_download[[1]], included_authors = "first", encoding = "ASCII")
write.csv(pm_df1, "pubmed_1.csv")
} else { pm_df1 = read.csv("pubmed_1.csv", row.names=1) }
# search part 2
if (!("pubmed_2.csv" %in% list.files())) {
query <- "(coronavirus OR COVID OR SARS*) AND vaccin* AND (trial OR phase) AND 2020/06/02:2020/08/01[crdt]"
pm_download <- batch_pubmed_download(pubmed_query_string = query, encoding = "ASCII")
pm_df2 <- table_articles_byAuth(pubmed_data = pm_download[[1]], included_authors = "first", encoding = "ASCII")
write.csv(pm_df2, "pubmed_2.csv")
} else { pm_df2 = read.csv("pubmed_2.csv", row.names=1) }
# search part 3
if (!("pubmed_3.csv" %in% list.files())) {
query <- "(coronavirus OR COVID OR SARS*) AND vaccin* AND (trial OR phase) AND 2020/08/02:2020/11/01[crdt]"
pm_download <- batch_pubmed_download(pubmed_query_string = query, encoding = "ASCII")
pm_df3 <- table_articles_byAuth(pubmed_data = pm_download[[1]], included_authors = "first", encoding = "ASCII")
write.csv(pm_df3, "pubmed_3.csv")
} else { pm_df3 = read.csv("pubmed_3.csv", row.names=1) }
# search part 4
if (!("pubmed_4.csv" %in% list.files())) {
query <- "(coronavirus OR COVID OR SARS*) AND vaccin* AND (trial OR phase) AND 2020/11/02:2021/02/01[crdt]"
pm_download <- batch_pubmed_download(pubmed_query_string = query, encoding = "ASCII")
pm_df4 <- table_articles_byAuth(pubmed_data = pm_download[[1]], included_authors = "first", encoding = "ASCII")
write.csv(pm_df4, "pubmed_4.csv")
} else { pm_df4 = read.csv("pubmed_4.csv", row.names=1) }
# search part 5
if (!("pubmed_5.csv" %in% list.files())) {
query <- "(coronavirus OR COVID OR SARS*) AND vaccin* AND (trial OR phase) AND 2021/02/02:2021/03/15[crdt]" ### UPDATE ###
pm_download <- batch_pubmed_download(pubmed_query_string = query, encoding = "ASCII")
pm_df5 <- table_articles_byAuth(pubmed_data = pm_download[[1]], included_authors = "first", encoding = "ASCII")
write.csv(pm_df5, "pubmed_5.csv")
} else { pm_df5 = read.csv("pubmed_5.csv", row.names=1) }
# merge results
pm_df = rbind(pm_df1, pm_df2, pm_df3, pm_df4)
pm_results <- data.frame(
ID = pm_df$pmid,
title = pm_df$title,
abstract = pm_df$abstract,
date = paste0(pm_df$year,"-",pm_df$month,"-",pm_df$day),
doi = pm_df$doi,
author_corresponding = paste(pm_df$firstname,pm_df$lastname),
author_corresponding_institution = pm_df$address,
source = "pubmed"
)
# collate results
collated = rbind(mx_reduced, pm_results)
write.csv(collated, "pre_abstract_screening_15Mar2021_full.csv")  ### UPDATE ###
#system("rm pubmed_*")
#system("rm mx_reduced*")
#system("rm easyPubMed_data_01.txt*")
# load packages
library(easyPubMed)
library(dplyr)
library(formattable)
library(medrxivr)
# search medrxiv
if (!("mx_reduced.csv" %in% list.files())) {
term1 <- c("[Cc]oronavirus","COVID*","SARS*") # OR
term2 <- c("[Vv]accin*") # OR
term3 <- c("[Tt]rial", "[Pp]hase") # OR
query <- list(term1, term2, term3) # AND
mx_results <- mx_search(data = mx_snapshot(), query = query, from_date = "2020-01-01", to_date = "2021-03-15") ### UPDATE ###
mx_reduced = mx_results %>% select(c(ID, title, abstract, date, doi, author_corresponding,
author_corresponding_institution))
mx_reduced$source = "medrxiv"
write.csv(mx_reduced, "mx_reduced.csv")
} else { mx_reduced = read.csv("mx_reduced.csv", row.names=1) }
# search pubmed
if (!("pubmed_1.csv" %in% list.files())) {
query <- "(coronavirus OR COVID OR SARS*) AND vaccin* AND (trial OR phase) AND 2020/01/01:2020/06/01[crdt]"
pm_download <- batch_pubmed_download(pubmed_query_string = query, encoding = "ASCII")
pm_df1 <- table_articles_byAuth(pubmed_data = pm_download[[1]], included_authors = "first", encoding = "ASCII")
write.csv(pm_df1, "pubmed_1.csv")
} else { pm_df1 = read.csv("pubmed_1.csv", row.names=1) }
# search part 2
if (!("pubmed_2.csv" %in% list.files())) {
query <- "(coronavirus OR COVID OR SARS*) AND vaccin* AND (trial OR phase) AND 2020/06/02:2020/08/01[crdt]"
pm_download <- batch_pubmed_download(pubmed_query_string = query, encoding = "ASCII")
pm_df2 <- table_articles_byAuth(pubmed_data = pm_download[[1]], included_authors = "first", encoding = "ASCII")
write.csv(pm_df2, "pubmed_2.csv")
} else { pm_df2 = read.csv("pubmed_2.csv", row.names=1) }
# search part 3
if (!("pubmed_3.csv" %in% list.files())) {
query <- "(coronavirus OR COVID OR SARS*) AND vaccin* AND (trial OR phase) AND 2020/08/02:2020/11/01[crdt]"
pm_download <- batch_pubmed_download(pubmed_query_string = query, encoding = "ASCII")
pm_df3 <- table_articles_byAuth(pubmed_data = pm_download[[1]], included_authors = "first", encoding = "ASCII")
write.csv(pm_df3, "pubmed_3.csv")
} else { pm_df3 = read.csv("pubmed_3.csv", row.names=1) }
# search part 4
if (!("pubmed_4.csv" %in% list.files())) {
query <- "(coronavirus OR COVID OR SARS*) AND vaccin* AND (trial OR phase) AND 2020/11/02:2021/02/01[crdt]"
pm_download <- batch_pubmed_download(pubmed_query_string = query, encoding = "ASCII")
pm_df4 <- table_articles_byAuth(pubmed_data = pm_download[[1]], included_authors = "first", encoding = "ASCII")
write.csv(pm_df4, "pubmed_4.csv")
} else { pm_df4 = read.csv("pubmed_4.csv", row.names=1) }
# search part 5
if (!("pubmed_5.csv" %in% list.files())) {
query <- "(coronavirus OR COVID OR SARS*) AND vaccin* AND (trial OR phase) AND 2021/02/02:2021/03/15[crdt]" ### UPDATE ###
pm_download <- batch_pubmed_download(pubmed_query_string = query, encoding = "ASCII")
pm_df5 <- table_articles_byAuth(pubmed_data = pm_download[[1]], included_authors = "first", encoding = "ASCII")
write.csv(pm_df5, "pubmed_5.csv")
} else { pm_df5 = read.csv("pubmed_5.csv", row.names=1) }
# merge results
pm_df = rbind(pm_df1, pm_df2, pm_df3, pm_df4, pm_df5)
pm_results <- data.frame(
ID = pm_df$pmid,
title = pm_df$title,
abstract = pm_df$abstract,
date = paste0(pm_df$year,"-",pm_df$month,"-",pm_df$day),
doi = pm_df$doi,
author_corresponding = paste(pm_df$firstname,pm_df$lastname),
author_corresponding_institution = pm_df$address,
source = "pubmed"
)
# collate results
collated = rbind(mx_reduced, pm_results)
write.csv(collated, "pre_abstract_screening_15Mar2021_full.csv")  ### UPDATE ###
#system("rm pubmed_*")
#system("rm mx_reduced*")
#system("rm easyPubMed_data_01.txt*")
sum(collated$source=="pubmed")
sum(collated$source=="medrxiv")
current_date = as.Date("2021-03-15")
### Figure --------------------------------------------------------------------
# load data
s = read.csv("input_data/VaC_LSHTM_landscape_summary.csv", stringsAsFactors = FALSE)
# set institute and platform factor levels
s$Institutes = factor(s$Institutes, levels = rev(s$Institutes))
s$Platform = factor(s$Platform, levels=c("RNA", "Vector (nr)", "Vector (r)", "Inactivated", "Live-attenuated", "Subunit", "VLP", "DNA", "Other"))
# convert input data into ggplot input dataframe (one row per record)
nvar = 7
nvac = nrow(s)
s1 = data.frame(
Institutes = rep(as.character(s$Institutes), nvar),
Platform = rep(s$Platform, nvar),
Stage = c(rep("I", nvac), rep("II", nvac), rep("III", nvac), rep("I", nvac), rep("II", nvac), rep("III", nvac), rep(" ", nvac)),
Group = c(rep("Registered trial", nvac*3), rep("Published", nvac*3), rep("In use", nvac)),
Status = c(s$PhaseI_trial, s$PhaseII_trial, s$PhaseIII_trial, s$PhaseI_pub, s$PhaseII_pub, s$PhaseIII_pub, s$In_use)
)
# set group, platform, and institute factor levels
s1$Group = factor(s1$Group, levels=c("Registered trial", "Published", "In use"))
s1$Platform = factor(s1$Platform, levels=levels(s$Platform))
s1$Institutes = factor(s1$Institutes, levels = rev(as.character(s$Institutes)))
# convert 1s in dataframe to words corresponding to platform (enabling colour-coding in plots)
s1$Status[s1$Status==0] = NA
s1$Status[s1$Status==1 & s1$Platform=="RNA"] = "RNA"
s1$Status[s1$Status==1 & s1$Platform=="DNA"] = "DNA"
s1$Status[s1$Status==1 & s1$Platform=="Vector (nr)"] = "Vector (nr)"
s1$Status[s1$Status==1 & s1$Platform=="Vector (r)"] = "Vector (r)"
s1$Status[s1$Status==1 & s1$Platform=="Inactivated"] = "Inactivated"
s1$Status[s1$Status==1 & s1$Platform=="Live-attenuated"] = "Live-attenuated"
s1$Status[s1$Status==1 & s1$Platform=="Subunit"] = "Subunit"
s1$Status[s1$Status==1 & s1$Platform=="VLP"] = "VLP"
s1$Status[s1$Status==1 & s1$Platform=="Other"] = "Other"
s1$Status = factor(s1$Status, levels=c("RNA", "Vector (nr)", "Vector (r)", "Inactivated", "Live-attenuated", "Subunit", "VLP", "DNA", "Other"))
# create heatmap of registered and published trials (plot panel 1)
g1 = ggplot(subset(s1, !is.na(Status)), aes(Stage, Institutes, fill=factor(Status))) + theme_bw() +
geom_tile(alpha = 0.9, colour="#f7f7f7", size=1) +
facet_grid(Platform~Group, scales = "free", space='free') +
labs(fill = "Platform") + ylab("") + xlab("") +
scale_x_discrete(position = "top") +
scale_fill_manual(values = c("RNA" = pal_1[2], "DNA" = pal_2[2], "Vector (nr)" = pal_3[2], "Vector (r)" = pal_4[2],
"Inactivated" = pal_5[2], "Live-attenuated" = pal_6[2], "Subunit" = pal_7[2], "VLP" = pal_8[2], "Other" = pal_9[2])) +
theme(panel.background = element_rect(fill = "#f7f7f7",colour = "#f7f7f7", linetype = "blank"),
panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.border = element_blank(),
text = element_text(size = 15), strip.background = element_blank(), strip.text.y = element_blank(),
strip.placement = "outside", legend.position = "bottom", legend.title = element_blank(),
legend.text = element_text(size = 14), axis.text = element_text(size=15), strip.text = element_text(size=15))
# create plot of manufacture projections (plot panel 2)
g2 = ggplot(s, aes(as.numeric(Manufacture), Institutes, fill = Platform)) +
geom_bar(stat = "identity") + theme_bw() +
scale_fill_manual(values = c("RNA" = pal_1[2], "DNA" = pal_2[2], "Vector (nr)" = pal_3[2], "Vector (r)" = pal_4[2],
"Inactivated" = pal_5[2], "Live-attenuated" = pal_6[2], "Subunit" = pal_7[2], "VLP" = pal_8[2], "Other" = pal_9[2])) +
facet_grid(Platform~., scales = "free", space='free') +
ylab("") + xlab("") + ggtitle("N doses\navailable, 2021\n") +
scale_x_log10(limits=c(10^6,10^10), labels = trans_format("log10", math_format(10^.x)), oob = rescale_none) +
theme(legend.position = "none", text = element_text(size = 15), axis.text.y = element_blank(), title = element_text(size = 12),
axis.text = element_text(size=15),
strip.background = element_blank(), strip.text.y = element_blank(), strip.placement = "outside",
panel.border = element_blank(), panel.grid.major.y = element_blank(), panel.grid.minor = element_blank(),
panel.grid.major.x = element_line(size = 0.5, linetype = 'solid', colour = "white"),
panel.background = element_rect(fill = "#f7f7f7",colour = "#f7f7f7", linetype = "blank"))
# import Our Wolrd in Data country reporting statistics
#owid = read.csv("input_data/owid_26Jan21.csv", stringsAsFactors = FALSE)
owid <- as.data.frame(data.table::fread("https://raw.githubusercontent.com/owid/covid-19-data/master/public/data/vaccinations/locations.csv"))
owid = subset(owid, iso_code!="")
unique(owid$vaccines)
### LOAD PACKAGES ---------------------------------------------------------------------------------
if(!require(data.table)) install.packages("data.table", repos = "http://cran.us.r-project.org")
if(!require(DT)) install.packages("DT", repos = "http://cran.us.r-project.org")
if(!require(dplyr)) install.packages("dplyr", repos = "http://cran.us.r-project.org")
if(!require(ggplot2)) install.packages("ggplot2", repos = "http://cran.us.r-project.org")
if(!require(plotly)) install.packages("plotly", repos = "http://cran.us.r-project.org")
if(!require(shiny)) install.packages("shiny", repos = "http://cran.us.r-project.org")
if(!require(shinythemes)) install.packages("shinythemes", repos = "http://cran.us.r-project.org")
if(!require(stringr)) install.packages("stringr", repos = "http://cran.us.r-project.org")
if(!require(stringi)) install.packages("stringi", repos = "http://cran.us.r-project.org")
if(!require(timevis)) install.packages("timevis", repos = "http://cran.us.r-project.org")
if(!require(RColorBrewer)) install.packages("RColorBrewer", repos = "http://cran.us.r-project.org")
if(!require(shinydashboard)) install.packages("shinydashboard", repos = "http://cran.us.r-project.org")
if(!require(writexl)) install.packages("writexl", repos = "http://cran.us.r-project.org")
if(!require(tidyverse)) install.packages("tidyverse", repos = "http://cran.us.r-project.org")
if(!require(readxl)) install.packages("readxl", repos = "http://cran.us.r-project.org")
if(!require(shinyWidgets)) install.packages("shinyWidgets", repos = "http://cran.us.r-project.org")
if(!require(cowplot)) install.packages("cowplot", repos = "http://cran.us.r-project.org")
if(!require(BiocManager)) install.packages("BiocManager", repos = "http://cran.us.r-project.org")
if(!require(leaflet)) install.packages("leaflet", repos = "http://cran.us.r-project.org")
if(!require(geojsonio)) install.packages("geojsonio", repos = "http://cran.us.r-project.org")
options(repos = BiocManager::repositories())
if(!require(ComplexHeatmap)) install.packages("ComplexHeatmap", repos = "https://bioconductor.org")
if(!require(scales)) install.packages("scales", repos = "https://bioconductor.org")
### Generate landscape inputs for each layer -------------------------------------------------------------------------------------
update_full = "15 March 2021"
update_equity = "15 March 2021"
source("input_code/VaC_landscape.R")
source("input_code/VaC_efficacy_map.R")
source("input_code/VaC_living_review.R")
source("input_code/VaC_implementation.R")
# additional code to update case counts for weekly updates
#source("input_code/VaC_jhu_daily_cases.R")
# update manual components for ui
table(landscape$Phase)
table(landscape$Platform)
table(landscape$In.use)
# load packages
library(easyPubMed)
library(dplyr)
library(formattable)
library(medrxivr)
# search medrxiv
if (!("mx_reduced.csv" %in% list.files())) {
term1 <- c("[Cc]oronavirus","COVID*","SARS*") # OR
term2 <- c("[Vv]accin*") # OR
term3 <- c("[Tt]rial", "[Pp]hase") # OR
query <- list(term1, term2, term3) # AND
mx_results <- mx_search(data = mx_snapshot(), query = query, from_date = "2020-01-01", to_date = "2021-03-22") ### UPDATE ###
mx_reduced = mx_results %>% select(c(ID, title, abstract, date, doi, author_corresponding,
author_corresponding_institution))
mx_reduced$source = "medrxiv"
write.csv(mx_reduced, "mx_reduced.csv")
} else { mx_reduced = read.csv("mx_reduced.csv", row.names=1) }
# search pubmed
if (!("pubmed_1.csv" %in% list.files())) {
query <- "(coronavirus OR COVID OR SARS*) AND vaccin* AND (trial OR phase) AND 2020/01/01:2020/06/01[crdt]"
pm_download <- batch_pubmed_download(pubmed_query_string = query, encoding = "ASCII")
pm_df1 <- table_articles_byAuth(pubmed_data = pm_download[[1]], included_authors = "first", encoding = "ASCII")
write.csv(pm_df1, "pubmed_1.csv")
} else { pm_df1 = read.csv("pubmed_1.csv", row.names=1) }
# search part 2
if (!("pubmed_2.csv" %in% list.files())) {
query <- "(coronavirus OR COVID OR SARS*) AND vaccin* AND (trial OR phase) AND 2020/06/02:2020/08/01[crdt]"
pm_download <- batch_pubmed_download(pubmed_query_string = query, encoding = "ASCII")
pm_df2 <- table_articles_byAuth(pubmed_data = pm_download[[1]], included_authors = "first", encoding = "ASCII")
write.csv(pm_df2, "pubmed_2.csv")
} else { pm_df2 = read.csv("pubmed_2.csv", row.names=1) }
# search part 3
if (!("pubmed_3.csv" %in% list.files())) {
query <- "(coronavirus OR COVID OR SARS*) AND vaccin* AND (trial OR phase) AND 2020/08/02:2020/11/01[crdt]"
pm_download <- batch_pubmed_download(pubmed_query_string = query, encoding = "ASCII")
pm_df3 <- table_articles_byAuth(pubmed_data = pm_download[[1]], included_authors = "first", encoding = "ASCII")
write.csv(pm_df3, "pubmed_3.csv")
} else { pm_df3 = read.csv("pubmed_3.csv", row.names=1) }
# search part 4
if (!("pubmed_4.csv" %in% list.files())) {
query <- "(coronavirus OR COVID OR SARS*) AND vaccin* AND (trial OR phase) AND 2020/11/02:2021/02/01[crdt]"
pm_download <- batch_pubmed_download(pubmed_query_string = query, encoding = "ASCII")
pm_df4 <- table_articles_byAuth(pubmed_data = pm_download[[1]], included_authors = "first", encoding = "ASCII")
write.csv(pm_df4, "pubmed_4.csv")
} else { pm_df4 = read.csv("pubmed_4.csv", row.names=1) }
# search part 5
if (!("pubmed_5.csv" %in% list.files())) {
query <- "(coronavirus OR COVID OR SARS*) AND vaccin* AND (trial OR phase) AND 2021/02/02:2021/03/22[crdt]" ### UPDATE ###
pm_download <- batch_pubmed_download(pubmed_query_string = query, encoding = "ASCII")
pm_df5 <- table_articles_byAuth(pubmed_data = pm_download[[1]], included_authors = "first", encoding = "ASCII")
write.csv(pm_df5, "pubmed_5.csv")
} else { pm_df5 = read.csv("pubmed_5.csv", row.names=1) }
# merge results
pm_df = rbind(pm_df1, pm_df2, pm_df3, pm_df4, pm_df5)
pm_results <- data.frame(
ID = pm_df$pmid,
title = pm_df$title,
abstract = pm_df$abstract,
date = paste0(pm_df$year,"-",pm_df$month,"-",pm_df$day),
doi = pm_df$doi,
author_corresponding = paste(pm_df$firstname,pm_df$lastname),
author_corresponding_institution = pm_df$address,
source = "pubmed"
)
# collate results
collated = rbind(mx_reduced, pm_results)
write.csv(collated, "pre_abstract_screening_22Mar2021_full.csv")  ### UPDATE ###
#system("rm pubmed_*")
#system("rm mx_reduced*")
#system("rm easyPubMed_data_01.txt*")
sum(collated$source=="pubmed")
sum(collated$source=="medrxiv")
# load packages
library(easyPubMed)
library(dplyr)
library(formattable)
library(medrxivr)
# search medrxiv
if (!("mx_reduced.csv" %in% list.files())) {
term1 <- c("[Cc]oronavirus","COVID*","SARS*") # OR
term2 <- c("[Vv]accin*") # OR
term3 <- c("[Tt]rial", "[Pp]hase") # OR
query <- list(term1, term2, term3) # AND
mx_results <- mx_search(data = mx_snapshot(), query = query, from_date = "2020-01-01", to_date = "2021-03-29") ### UPDATE ###
mx_reduced = mx_results %>% select(c(ID, title, abstract, date, doi, author_corresponding,
author_corresponding_institution))
mx_reduced$source = "medrxiv"
write.csv(mx_reduced, "mx_reduced.csv")
} else { mx_reduced = read.csv("mx_reduced.csv", row.names=1) }
# search pubmed
if (!("pubmed_1.csv" %in% list.files())) {
query <- "(coronavirus OR COVID OR SARS*) AND vaccin* AND (trial OR phase) AND 2020/01/01:2020/06/01[crdt]"
pm_download <- batch_pubmed_download(pubmed_query_string = query, encoding = "ASCII")
pm_df1 <- table_articles_byAuth(pubmed_data = pm_download[[1]], included_authors = "first", encoding = "ASCII")
write.csv(pm_df1, "pubmed_1.csv")
} else { pm_df1 = read.csv("pubmed_1.csv", row.names=1) }
# search part 2
if (!("pubmed_2.csv" %in% list.files())) {
query <- "(coronavirus OR COVID OR SARS*) AND vaccin* AND (trial OR phase) AND 2020/06/02:2020/08/01[crdt]"
pm_download <- batch_pubmed_download(pubmed_query_string = query, encoding = "ASCII")
pm_df2 <- table_articles_byAuth(pubmed_data = pm_download[[1]], included_authors = "first", encoding = "ASCII")
write.csv(pm_df2, "pubmed_2.csv")
} else { pm_df2 = read.csv("pubmed_2.csv", row.names=1) }
# search part 3
if (!("pubmed_3.csv" %in% list.files())) {
query <- "(coronavirus OR COVID OR SARS*) AND vaccin* AND (trial OR phase) AND 2020/08/02:2020/11/01[crdt]"
pm_download <- batch_pubmed_download(pubmed_query_string = query, encoding = "ASCII")
pm_df3 <- table_articles_byAuth(pubmed_data = pm_download[[1]], included_authors = "first", encoding = "ASCII")
write.csv(pm_df3, "pubmed_3.csv")
} else { pm_df3 = read.csv("pubmed_3.csv", row.names=1) }
# search part 4
if (!("pubmed_4.csv" %in% list.files())) {
query <- "(coronavirus OR COVID OR SARS*) AND vaccin* AND (trial OR phase) AND 2020/11/02:2021/02/01[crdt]"
pm_download <- batch_pubmed_download(pubmed_query_string = query, encoding = "ASCII")
pm_df4 <- table_articles_byAuth(pubmed_data = pm_download[[1]], included_authors = "first", encoding = "ASCII")
write.csv(pm_df4, "pubmed_4.csv")
} else { pm_df4 = read.csv("pubmed_4.csv", row.names=1) }
# search part 5
if (!("pubmed_5.csv" %in% list.files())) {
query <- "(coronavirus OR COVID OR SARS*) AND vaccin* AND (trial OR phase) AND 2021/02/02:2021/03/29[crdt]" ### UPDATE ###
pm_download <- batch_pubmed_download(pubmed_query_string = query, encoding = "ASCII")
pm_df5 <- table_articles_byAuth(pubmed_data = pm_download[[1]], included_authors = "first", encoding = "ASCII")
write.csv(pm_df5, "pubmed_5.csv")
} else { pm_df5 = read.csv("pubmed_5.csv", row.names=1) }
# merge results
pm_df = rbind(pm_df1, pm_df2, pm_df3, pm_df4, pm_df5)
pm_results <- data.frame(
ID = pm_df$pmid,
title = pm_df$title,
abstract = pm_df$abstract,
date = paste0(pm_df$year,"-",pm_df$month,"-",pm_df$day),
doi = pm_df$doi,
author_corresponding = paste(pm_df$firstname,pm_df$lastname),
author_corresponding_institution = pm_df$address,
source = "pubmed"
)
# collate results
collated = rbind(mx_reduced, pm_results)
write.csv(collated, "pre_abstract_screening_29Mar2021_full.csv")  ### UPDATE ###
#system("rm pubmed_*")
#system("rm mx_reduced*")
#system("rm easyPubMed_data_01.txt*")
sum(collated$source=="pubmed")
sum(collated$source=="medrxiv")
