summary <- data.frame(
"Group" =  db_plot$Plotgroup,
"Subgroup_1_N" = db_plot$Group1N,
"Subgroup_1_level" = db_plot$Group1levelpost95CI,
"Subgroup_1_binary" = db_plot$Group1responseratenN,
"Subgroup_2_N" = db_plot$Group2N,
"Subgroup_2_level" = db_plot$Group2levelpost95CI,
"Subgroup_1_binary" = db_plot$Group2responseratenN
)
custom_header = htmltools::withTags(table(class = 'display',
thead(tr(
th(rowspan = 2, 'Group'),
th(colspan = 3, reactive_db()$Group1label[1]),
th(colspan = 3, reactive_db()$Group2label[1])
),
tr(lapply(rep(c('N', 'Levels (post)', 'Response rate'), 2), th))
)))
DT::datatable(summary, container = custom_header, rownames=F, escape = FALSE, options = list(dom = 't', ordering=F))  %>%
formatStyle(columns = c(1:8), fontSize = '90%')
}
})
# final additions
output$other_cofactors <- renderUI({
other <- reactive_db()$Othercofactors[!is.na(reactive_db()$Othercofactors) & reactive_db()$Othercofactors!="N/A"]
other_html = paste0("<li>",other,"</li>")
other_html = paste0("<h4>Factors associated with vaccine response</h4><ul>", paste(other_html, collapse = ""), "</ul><br>")
if (length(other)==0) { return(NULL) }
else { HTML(str_replace_all(other_html, "\\)\\,\\)", "))")) }
})
output$other_endpoints <- renderUI({
other <- reactive_db()$Otherendpoints[!is.na(reactive_db()$Otherendpoints) & reactive_db()$Otherendpoints!="N/A"]
other_html = paste0("<li>",other,"</li>")
other_html = paste0("<h4>Other outcomes measured</h4><ul>", paste(other_html, collapse = ""), "</ul>")
if (length(other)==0) { return(NULL) }
else { HTML(str_replace_all(other_html, "\\)\\,\\)", "))")) }
})
output$trial_next_steps <- renderUI({ HTML(reactive_db()$Nextstepsproposed[1]) })
# update outcome measurement options - antibody
observeEvent(input$select_trial, {
updatePickerInput(session = session, inputId = "select_outcome",
choices = unique(reactive_db()$Outcome[reactive_db()$Group=="Antibody" & !is.na(reactive_db()$Group)]), selected = reactive_db()$Outcome[reactive_db()$Group=="Antibody"][1])
}, ignoreInit = TRUE)
# update outcome measurement options - T cell endpoints
observeEvent(input$select_trial, {
updatePickerInput(session = session, inputId = "select_outcome_T",
choices = unique(reactive_db()$Outcome[reactive_db()$Group=="T-cell" & !is.na(reactive_db()$Group)]), selected = reactive_db()$Outcome[reactive_db()$Group=="T-cell"][1])
}, ignoreInit = TRUE)
# update outcome measurement options - efficacy endpoints
observeEvent(input$select_trial, {
updatePickerInput(session = session, inputId = "select_outcome_efficacy",
choices = unique(reactive_db()$Efficacyendpoint, selected = reactive_db()$Efficacyendpoint[1]))
}, ignoreInit = TRUE)
# update outcome measurement options - subgroup
observeEvent(input$select_trial, {
if (reactive_db()$Subgroupsummary[1]=="Not applicable") {
updatePickerInput(session = session, inputId = "select_outcome_subgroup",
choices = "Not applicable", selected = "Not applicable")
}
else {
updatePickerInput(session = session, inputId = "select_outcome_subgroup",
choices = unique(reactive_db()$Outcome), selected = reactive_db()$Outcome[1])
}
}, ignoreInit = TRUE)
###########################
### IMPLEMENTATION PAGE ###
###########################
output$summary_matrix <- renderPlot({ summary_matrix })
output$implementation_table <- DT::renderDataTable({
if (length(input$implementation_select_vaccine)==1) {
imp_subset <- imp %>% filter(Vaccine %in% input$implementation_select_vaccine)
colnames(imp_subset) = c("","",as.character(imp_subset$Vaccine[1]))
imp_subset = imp_subset[,c(1,3)]
} else {
imp_subset <- imp %>% filter(Vaccine %in% input$implementation_select_vaccine[1])
imp_subset = imp_subset[,c(1,3)]
for (i in 2:length(input$implementation_select_vaccine)) {
imp_subset_new <- imp %>% filter(Vaccine %in% input$implementation_select_vaccine[i])
imp_subset = cbind(imp_subset, imp_subset_new[,3])
}
colnames(imp_subset) = c("",input$implementation_select_vaccine)
}
col_width = paste0(round(100/ncol(imp_subset),0),"%")
DT::datatable(imp_subset, rownames=F, escape = FALSE,
options = list(dom = 't', ordering=F, pageLength = 50,
autoWidth = FALSE, columnDefs = list(list(width = col_width, targets = "_all")))) %>%
formatStyle(columns = c(1:6), fontSize = '90%') %>%
formatStyle(columns = 1, fontWeight = 'bold')
})
# equity plot
equity_input <- reactive({
equity = equity_full
selected_date = format(as.Date(input$equity_date, format="%d %b %y"), "%Y-%m-%d")
equity$date[is.na(equity$date)] = selected_date
equity <- equity %>% filter(date == selected_date)
if ("hic" %in% input$equity_group==FALSE) { equity = subset(equity, income_group!="High income") }
if ("umic" %in% input$equity_group==FALSE) { equity = subset(equity, income_group!="Upper middle income") }
if ("lmic" %in% input$equity_group==FALSE) { equity = subset(equity, income_group!="Lower middle income") }
if ("lic" %in% input$equity_group==FALSE) { equity = subset(equity, income_group!="Low income") }
if (nrow(equity)==0) {
equity = equity_full
equity$date[is.na(equity$date)] = selected_date
equity <- equity %>% filter(date == selected_date)
}
if (input$equity_outcome=="% vaccinated with at least 1 dose") { equity$y = equity$people_vaccinated_per_hundred }
if (input$equity_outcome=="% fully vaccinated") { equity$y = equity$people_fully_vaccinated_per_hundred }
if (input$equity_outcome=="Total vaccines per hundred people") { equity$y = equity$total_vaccinations_per_hundred }
if (input$equity_outcome=="Total vaccines") { equity$y = equity$total_vaccinations }
equity = subset(equity, population>1e6 & !is.na(gdp_2019))
equity$y[is.na(equity$y)] = 0
equity
})
output$equity_sum <- renderText({ round(sum(equity_input()$total_vaccinations, na.rm=TRUE)/1e6,0)})
output$equity_date_clean <-  renderText({ format(as.Date(input$equity_date, format="%d %b %y"), "%d %b %Y") })
output$equity_plot <- renderPlotly({
if (input$equity_outcome=="% vaccinated with at least 1 dose") {
ymax = max(equity_full$people_vaccinated_per_hundred, na.rm=TRUE)+10
units = "%"
}
if (input$equity_outcome=="% fully vaccinated") {
ymax = max(equity_full$people_fully_vaccinated_per_hundred, na.rm=TRUE)+10
units = "%"
}
if (input$equity_outcome=="Total vaccines per hundred people") {
ymax = max(equity_full$total_vaccinations_per_hundred, na.rm=TRUE)+10
units = " vaccine doses"
}
# if (input$equity_outcome=="Total vaccines") {
#   ymax = max(equity_full$total_vaccinations, na.rm=TRUE)
# }
g1 = ggplot(equity_input(), aes(gdp_2019, y, fill=factor(income_group), size=population^(1/2), group = 1,
text = paste0("<b>",round(y,1),units,"</b>",
"\n<i>",country,"</i>",
"\nVaccine(s): ",vaccines))) + #"\nPopulation: ", round(population/1e6,1), "M")
theme_bw() +
geom_point(alpha=0.5, stroke = 0.2) + ylab(input$equity_outcome) +
scale_fill_manual(values = c("High income" =  "#B40F20", "Upper middle income" = "#8856a7", "Lower middle income" = "#EBCC2A", "Low income" = "#3B9AB2")) +
theme(legend.title = element_blank()) +
scale_x_continuous(trans = log2_trans(), breaks = trans_breaks("log2", function(x) 2^x), limits = c(min(equity_full$gdp_2019, na.rm=T), max(equity_full$gdp_2019, na.rm=T)))  +
scale_size(range = c(0, 12)) + theme(text = element_text(size=11), legend.position = "none") +
xlab("Income (GDP/capita in USD)") + ylim(0,ymax)
ggplotly(g1, tooltip = c("text")) %>% layout(hoverlabel = list(font=list(size=15)))
})
#################
### FAQs PAGE ###
#################
output$vaccine_types <- DT::renderDataTable({
DT::datatable(data.table::fread("input_data/VaC_LSHTM_vaccine_types.csv"),
rownames=F, options = list(dom = 't', ordering=F,
columnDefs = list(list(width = "65%", targets = 1)))) %>%
formatStyle(columns = c(1:3), fontSize = '90%') %>%
formatStyle(columns = 1, fontWeight = 'bold')
})
# render table even when hidden to improve loading speed
outputOptions(output, "implementation_table", suspendWhenHidden = FALSE)
outputOptions(output, "trial_table", suspendWhenHidden = FALSE)
outputOptions(output, "eligible_studies", suspendWhenHidden = FALSE)
outputOptions(output, "search_log", suspendWhenHidden = FALSE)
outputOptions(output, "vaccine_types", suspendWhenHidden = FALSE)
outputOptions(output, "vaccine_timeline", suspendWhenHidden = FALSE)
outputOptions(output, "equity_sum", suspendWhenHidden = FALSE)
outputOptions(output, "equity_plot", suspendWhenHidden = FALSE)
}
#shinyApp(ui = ui, server = server)
runApp(shinyApp(ui, server), launch.browser = TRUE)
#library(rsconnect)
#deployApp(account="vac-lshtm")
# load packages
library(easyPubMed)
library(dplyr)
library(formattable)
library(medrxivr)
# search medrxiv
if (!("mx_reduced.csv" %in% list.files())) {
term1 <- c("[Cc]oronavirus","COVID*","SARS*") # OR
term2 <- c("[Vv]accin*") # OR
term3 <- c("[Tt]rial", "[Pp]hase") # OR
query <- list(term1, term2, term3) # AND
mx_results <- mx_search(data = mx_snapshot(), query = query, from_date = "2020-01-01", to_date = "2021-06-21") ### UPDATE ###
mx_reduced = mx_results %>% select(c(ID, title, abstract, date, doi, author_corresponding,
author_corresponding_institution))
mx_reduced$source = "medrxiv"
write.csv(mx_reduced, "mx_reduced.csv")
} else { mx_reduced = read.csv("mx_reduced.csv", row.names=1) }
# search pubmed
if (!("pubmed_1.csv" %in% list.files())) {
query <- "(coronavirus OR COVID OR SARS*) AND vaccin* AND (trial OR phase) AND 2020/01/01:2020/06/01[crdt]"
pm_download <- batch_pubmed_download(pubmed_query_string = query, encoding = "ASCII")
pm_df1 <- table_articles_byAuth(pubmed_data = pm_download[[1]], included_authors = "first", encoding = "ASCII")
write.csv(pm_df1, "pubmed_1.csv")
} else { pm_df1 = read.csv("pubmed_1.csv", row.names=1) }
# search part 2
if (!("pubmed_2.csv" %in% list.files())) {
query <- "(coronavirus OR COVID OR SARS*) AND vaccin* AND (trial OR phase) AND 2020/06/02:2020/08/01[crdt]"
pm_download <- batch_pubmed_download(pubmed_query_string = query, encoding = "ASCII")
pm_df2 <- table_articles_byAuth(pubmed_data = pm_download[[1]], included_authors = "first", encoding = "ASCII")
write.csv(pm_df2, "pubmed_2.csv")
} else { pm_df2 = read.csv("pubmed_2.csv", row.names=1) }
# search part 3
if (!("pubmed_3.csv" %in% list.files())) {
query <- "(coronavirus OR COVID OR SARS*) AND vaccin* AND (trial OR phase) AND 2020/08/02:2020/11/01[crdt]"
pm_download <- batch_pubmed_download(pubmed_query_string = query, encoding = "ASCII")
pm_df3 <- table_articles_byAuth(pubmed_data = pm_download[[1]], included_authors = "first", encoding = "ASCII")
write.csv(pm_df3, "pubmed_3.csv")
} else { pm_df3 = read.csv("pubmed_3.csv", row.names=1) }
# search part 4
if (!("pubmed_4.csv" %in% list.files())) {
query <- "(coronavirus OR COVID OR SARS*) AND vaccin* AND (trial OR phase) AND 2020/11/02:2021/02/01[crdt]"
pm_download <- batch_pubmed_download(pubmed_query_string = query, encoding = "ASCII")
pm_df4 <- table_articles_byAuth(pubmed_data = pm_download[[1]], included_authors = "first", encoding = "ASCII")
write.csv(pm_df4, "pubmed_4.csv")
} else { pm_df4 = read.csv("pubmed_4.csv", row.names=1) }
# search part 5
if (!("pubmed_5.csv" %in% list.files())) {
query <- "(coronavirus OR COVID OR SARS*) AND vaccin* AND (trial OR phase) AND 2021/02/02:2021/05/01[crdt]"
pm_download <- batch_pubmed_download(pubmed_query_string = query, encoding = "ASCII")
pm_df5 <- table_articles_byAuth(pubmed_data = pm_download[[1]], included_authors = "first", encoding = "ASCII")
write.csv(pm_df5, "pubmed_5.csv")
} else { pm_df5 = read.csv("pubmed_5.csv", row.names=1) }
# search part 6
if (!("pubmed_6.csv" %in% list.files())) {
query <- "(coronavirus OR COVID OR SARS*) AND vaccin* AND (trial OR phase) AND 2021/05/02:2021/06/21[crdt]" ### UPDATE ###
pm_download <- batch_pubmed_download(pubmed_query_string = query, encoding = "ASCII")
pm_df6 <- table_articles_byAuth(pubmed_data = pm_download[[1]], included_authors = "first", encoding = "ASCII")
write.csv(pm_df6, "pubmed_6.csv")
} else { pm_df6 = read.csv("pubmed_6.csv", row.names=1) }
# merge results
pm_df = rbind(pm_df1, pm_df2, pm_df3, pm_df4, pm_df5, pm_df6)
pm_results <- data.frame(
ID = pm_df$pmid,
title = pm_df$title,
abstract = pm_df$abstract,
date = paste0(pm_df$year,"-",pm_df$month,"-",pm_df$day),
doi = pm_df$doi,
author_corresponding = paste(pm_df$firstname,pm_df$lastname),
author_corresponding_institution = pm_df$address,
source = "pubmed"
)
# collate results
collated = rbind(mx_reduced, pm_results)
write.csv(collated, "pre_abstract_screening_21Jun2021_full.csv")  ### UPDATE ###
#system("rm pubmed_*")
#system("rm mx_reduced*")
#system("rm easyPubMed_data_01.txt*")
# load packages
library(easyPubMed)
library(dplyr)
library(formattable)
library(medrxivr)
# search medrxiv
if (!("mx_reduced.csv" %in% list.files())) {
term1 <- c("[Cc]oronavirus","COVID*","SARS*") # OR
term2 <- c("[Vv]accin*") # OR
term3 <- c("[Tt]rial", "[Pp]hase") # OR
query <- list(term1, term2, term3) # AND
mx_results <- mx_search(data = mx_snapshot(), query = query, from_date = "2020-01-01", to_date = "2021-06-28") ### UPDATE ###
mx_reduced = mx_results %>% select(c(ID, title, abstract, date, doi, author_corresponding,
author_corresponding_institution))
mx_reduced$source = "medrxiv"
write.csv(mx_reduced, "mx_reduced.csv")
} else { mx_reduced = read.csv("mx_reduced.csv", row.names=1) }
# search pubmed
if (!("pubmed_1.csv" %in% list.files())) {
query <- "(coronavirus OR COVID OR SARS*) AND vaccin* AND (trial OR phase) AND 2020/01/01:2020/06/01[crdt]"
pm_download <- batch_pubmed_download(pubmed_query_string = query, encoding = "ASCII")
pm_df1 <- table_articles_byAuth(pubmed_data = pm_download[[1]], included_authors = "first", encoding = "ASCII")
write.csv(pm_df1, "pubmed_1.csv")
} else { pm_df1 = read.csv("pubmed_1.csv", row.names=1) }
# search part 2
if (!("pubmed_2.csv" %in% list.files())) {
query <- "(coronavirus OR COVID OR SARS*) AND vaccin* AND (trial OR phase) AND 2020/06/02:2020/08/01[crdt]"
pm_download <- batch_pubmed_download(pubmed_query_string = query, encoding = "ASCII")
pm_df2 <- table_articles_byAuth(pubmed_data = pm_download[[1]], included_authors = "first", encoding = "ASCII")
write.csv(pm_df2, "pubmed_2.csv")
} else { pm_df2 = read.csv("pubmed_2.csv", row.names=1) }
# search part 3
if (!("pubmed_3.csv" %in% list.files())) {
query <- "(coronavirus OR COVID OR SARS*) AND vaccin* AND (trial OR phase) AND 2020/08/02:2020/11/01[crdt]"
pm_download <- batch_pubmed_download(pubmed_query_string = query, encoding = "ASCII")
pm_df3 <- table_articles_byAuth(pubmed_data = pm_download[[1]], included_authors = "first", encoding = "ASCII")
write.csv(pm_df3, "pubmed_3.csv")
} else { pm_df3 = read.csv("pubmed_3.csv", row.names=1) }
# search part 4
if (!("pubmed_4.csv" %in% list.files())) {
query <- "(coronavirus OR COVID OR SARS*) AND vaccin* AND (trial OR phase) AND 2020/11/02:2021/02/01[crdt]"
pm_download <- batch_pubmed_download(pubmed_query_string = query, encoding = "ASCII")
pm_df4 <- table_articles_byAuth(pubmed_data = pm_download[[1]], included_authors = "first", encoding = "ASCII")
write.csv(pm_df4, "pubmed_4.csv")
} else { pm_df4 = read.csv("pubmed_4.csv", row.names=1) }
# search part 5
if (!("pubmed_5.csv" %in% list.files())) {
query <- "(coronavirus OR COVID OR SARS*) AND vaccin* AND (trial OR phase) AND 2021/02/02:2021/05/01[crdt]"
pm_download <- batch_pubmed_download(pubmed_query_string = query, encoding = "ASCII")
pm_df5 <- table_articles_byAuth(pubmed_data = pm_download[[1]], included_authors = "first", encoding = "ASCII")
write.csv(pm_df5, "pubmed_5.csv")
} else { pm_df5 = read.csv("pubmed_5.csv", row.names=1) }
# search part 6
if (!("pubmed_6.csv" %in% list.files())) {
query <- "(coronavirus OR COVID OR SARS*) AND vaccin* AND (trial OR phase) AND 2021/05/02:2021/06/28[crdt]" ### UPDATE ###
pm_download <- batch_pubmed_download(pubmed_query_string = query, encoding = "ASCII")
pm_df6 <- table_articles_byAuth(pubmed_data = pm_download[[1]], included_authors = "first", encoding = "ASCII")
write.csv(pm_df6, "pubmed_6.csv")
} else { pm_df6 = read.csv("pubmed_6.csv", row.names=1) }
# merge results
pm_df = rbind(pm_df1, pm_df2, pm_df3, pm_df4, pm_df5, pm_df6)
pm_results <- data.frame(
ID = pm_df$pmid,
title = pm_df$title,
abstract = pm_df$abstract,
date = paste0(pm_df$year,"-",pm_df$month,"-",pm_df$day),
doi = pm_df$doi,
author_corresponding = paste(pm_df$firstname,pm_df$lastname),
author_corresponding_institution = pm_df$address,
source = "pubmed"
)
# collate results
collated = rbind(mx_reduced, pm_results)
write.csv(collated, "pre_abstract_screening_28Jun2021_full.csv")  ### UPDATE ###
#system("rm pubmed_*")
#system("rm mx_reduced*")
#system("rm easyPubMed_data_01.txt*")
# load packages
library(easyPubMed)
library(dplyr)
library(formattable)
library(medrxivr)
# search medrxiv
if (!("mx_reduced.csv" %in% list.files())) {
term1 <- c("[Cc]oronavirus","COVID*","SARS*") # OR
term2 <- c("[Vv]accin*") # OR
term3 <- c("[Tt]rial", "[Pp]hase") # OR
query <- list(term1, term2, term3) # AND
mx_results <- mx_search(data = mx_snapshot(), query = query, from_date = "2020-01-01", to_date = "2021-07-05") ### UPDATE ###
mx_reduced = mx_results %>% select(c(ID, title, abstract, date, doi, author_corresponding,
author_corresponding_institution))
mx_reduced$source = "medrxiv"
write.csv(mx_reduced, "mx_reduced.csv")
} else { mx_reduced = read.csv("mx_reduced.csv", row.names=1) }
# search pubmed
if (!("pubmed_1.csv" %in% list.files())) {
query <- "(coronavirus OR COVID OR SARS*) AND vaccin* AND (trial OR phase) AND 2020/01/01:2020/06/01[crdt]"
pm_download <- batch_pubmed_download(pubmed_query_string = query, encoding = "ASCII")
pm_df1 <- table_articles_byAuth(pubmed_data = pm_download[[1]], included_authors = "first", encoding = "ASCII")
write.csv(pm_df1, "pubmed_1.csv")
} else { pm_df1 = read.csv("pubmed_1.csv", row.names=1) }
# search part 2
if (!("pubmed_2.csv" %in% list.files())) {
query <- "(coronavirus OR COVID OR SARS*) AND vaccin* AND (trial OR phase) AND 2020/06/02:2020/08/01[crdt]"
pm_download <- batch_pubmed_download(pubmed_query_string = query, encoding = "ASCII")
pm_df2 <- table_articles_byAuth(pubmed_data = pm_download[[1]], included_authors = "first", encoding = "ASCII")
write.csv(pm_df2, "pubmed_2.csv")
} else { pm_df2 = read.csv("pubmed_2.csv", row.names=1) }
# search part 3
if (!("pubmed_3.csv" %in% list.files())) {
query <- "(coronavirus OR COVID OR SARS*) AND vaccin* AND (trial OR phase) AND 2020/08/02:2020/11/01[crdt]"
pm_download <- batch_pubmed_download(pubmed_query_string = query, encoding = "ASCII")
pm_df3 <- table_articles_byAuth(pubmed_data = pm_download[[1]], included_authors = "first", encoding = "ASCII")
write.csv(pm_df3, "pubmed_3.csv")
} else { pm_df3 = read.csv("pubmed_3.csv", row.names=1) }
# search part 4
if (!("pubmed_4.csv" %in% list.files())) {
query <- "(coronavirus OR COVID OR SARS*) AND vaccin* AND (trial OR phase) AND 2020/11/02:2021/02/01[crdt]"
pm_download <- batch_pubmed_download(pubmed_query_string = query, encoding = "ASCII")
pm_df4 <- table_articles_byAuth(pubmed_data = pm_download[[1]], included_authors = "first", encoding = "ASCII")
write.csv(pm_df4, "pubmed_4.csv")
} else { pm_df4 = read.csv("pubmed_4.csv", row.names=1) }
# search part 5
if (!("pubmed_5.csv" %in% list.files())) {
query <- "(coronavirus OR COVID OR SARS*) AND vaccin* AND (trial OR phase) AND 2021/02/02:2021/05/01[crdt]"
pm_download <- batch_pubmed_download(pubmed_query_string = query, encoding = "ASCII")
pm_df5 <- table_articles_byAuth(pubmed_data = pm_download[[1]], included_authors = "first", encoding = "ASCII")
write.csv(pm_df5, "pubmed_5.csv")
} else { pm_df5 = read.csv("pubmed_5.csv", row.names=1) }
# search part 6
if (!("pubmed_6.csv" %in% list.files())) {
query <- "(coronavirus OR COVID OR SARS*) AND vaccin* AND (trial OR phase) AND 2021/05/02:2021/07/05[crdt]" ### UPDATE ###
pm_download <- batch_pubmed_download(pubmed_query_string = query, encoding = "ASCII")
pm_df6 <- table_articles_byAuth(pubmed_data = pm_download[[1]], included_authors = "first", encoding = "ASCII")
write.csv(pm_df6, "pubmed_6.csv")
} else { pm_df6 = read.csv("pubmed_6.csv", row.names=1) }
# merge results
pm_df = rbind(pm_df1, pm_df2, pm_df3, pm_df4, pm_df5, pm_df6)
pm_results <- data.frame(
ID = pm_df$pmid,
title = pm_df$title,
abstract = pm_df$abstract,
date = paste0(pm_df$year,"-",pm_df$month,"-",pm_df$day),
doi = pm_df$doi,
author_corresponding = paste(pm_df$firstname,pm_df$lastname),
author_corresponding_institution = pm_df$address,
source = "pubmed"
)
# collate results
collated = rbind(mx_reduced, pm_results)
write.csv(collated, "pre_abstract_screening_05Jul2021_full.csv")  ### UPDATE ###
#system("rm pubmed_*")
#system("rm mx_reduced*")
#system("rm easyPubMed_data_01.txt*")
sum(collated$source=="pubmed")
sum(collated$source=="medrxiv")
# load packages
library(easyPubMed)
library(dplyr)
library(formattable)
library(medrxivr)
# search medrxiv
if (!("mx_reduced.csv" %in% list.files())) {
term1 <- c("[Cc]oronavirus","COVID*","SARS*") # OR
term2 <- c("[Vv]accin*") # OR
term3 <- c("[Tt]rial", "[Pp]hase") # OR
query <- list(term1, term2, term3) # AND
mx_results <- mx_search(data = mx_snapshot(), query = query, from_date = "2020-01-01", to_date = "2021-07-05") ### UPDATE ###
mx_reduced = mx_results %>% select(c(ID, title, abstract, date, doi, author_corresponding,
author_corresponding_institution))
mx_reduced$source = "medrxiv"
write.csv(mx_reduced, "mx_reduced.csv")
} else { mx_reduced = read.csv("mx_reduced.csv", row.names=1) }
# search pubmed
if (!("pubmed_1.csv" %in% list.files())) {
query <- "(coronavirus OR COVID OR SARS*) AND vaccin* AND (trial OR phase) AND 2020/01/01:2020/06/01[crdt]"
pm_download <- batch_pubmed_download(pubmed_query_string = query, encoding = "ASCII")
pm_df1 <- table_articles_byAuth(pubmed_data = pm_download[[1]], included_authors = "first", encoding = "ASCII")
write.csv(pm_df1, "pubmed_1.csv")
} else { pm_df1 = read.csv("pubmed_1.csv", row.names=1) }
# search part 2
if (!("pubmed_2.csv" %in% list.files())) {
query <- "(coronavirus OR COVID OR SARS*) AND vaccin* AND (trial OR phase) AND 2020/06/02:2020/08/01[crdt]"
pm_download <- batch_pubmed_download(pubmed_query_string = query, encoding = "ASCII")
pm_df2 <- table_articles_byAuth(pubmed_data = pm_download[[1]], included_authors = "first", encoding = "ASCII")
write.csv(pm_df2, "pubmed_2.csv")
} else { pm_df2 = read.csv("pubmed_2.csv", row.names=1) }
# search part 3
if (!("pubmed_3.csv" %in% list.files())) {
query <- "(coronavirus OR COVID OR SARS*) AND vaccin* AND (trial OR phase) AND 2020/08/02:2020/11/01[crdt]"
pm_download <- batch_pubmed_download(pubmed_query_string = query, encoding = "ASCII")
pm_df3 <- table_articles_byAuth(pubmed_data = pm_download[[1]], included_authors = "first", encoding = "ASCII")
write.csv(pm_df3, "pubmed_3.csv")
} else { pm_df3 = read.csv("pubmed_3.csv", row.names=1) }
# search part 4
if (!("pubmed_4.csv" %in% list.files())) {
query <- "(coronavirus OR COVID OR SARS*) AND vaccin* AND (trial OR phase) AND 2020/11/02:2021/02/01[crdt]"
pm_download <- batch_pubmed_download(pubmed_query_string = query, encoding = "ASCII")
pm_df4 <- table_articles_byAuth(pubmed_data = pm_download[[1]], included_authors = "first", encoding = "ASCII")
write.csv(pm_df4, "pubmed_4.csv")
} else { pm_df4 = read.csv("pubmed_4.csv", row.names=1) }
# search part 5
if (!("pubmed_5.csv" %in% list.files())) {
query <- "(coronavirus OR COVID OR SARS*) AND vaccin* AND (trial OR phase) AND 2021/02/02:2021/05/01[crdt]"
pm_download <- batch_pubmed_download(pubmed_query_string = query, encoding = "ASCII")
pm_df5 <- table_articles_byAuth(pubmed_data = pm_download[[1]], included_authors = "first", encoding = "ASCII")
write.csv(pm_df5, "pubmed_5.csv")
} else { pm_df5 = read.csv("pubmed_5.csv", row.names=1) }
# search part 6
if (!("pubmed_6.csv" %in% list.files())) {
query <- "(coronavirus OR COVID OR SARS*) AND vaccin* AND (trial OR phase) AND 2021/05/02:2021/07/05[crdt]" ### UPDATE ###
pm_download <- batch_pubmed_download(pubmed_query_string = query, encoding = "ASCII")
pm_df6 <- table_articles_byAuth(pubmed_data = pm_download[[1]], included_authors = "first", encoding = "ASCII")
write.csv(pm_df6, "pubmed_6.csv")
} else { pm_df6 = read.csv("pubmed_6.csv", row.names=1) }
# merge results
pm_df = rbind(pm_df1, pm_df2, pm_df3, pm_df4, pm_df5, pm_df6)
pm_results <- data.frame(
ID = pm_df$pmid,
title = pm_df$title,
abstract = pm_df$abstract,
date = paste0(pm_df$year,"-",pm_df$month,"-",pm_df$day),
doi = pm_df$doi,
author_corresponding = paste(pm_df$firstname,pm_df$lastname),
author_corresponding_institution = pm_df$address,
source = "pubmed"
)
# collate results
collated = rbind(mx_reduced, pm_results)
write.csv(collated, "pre_abstract_screening_05Jul2021_full.csv")  ### UPDATE ###
#system("rm pubmed_*")
#system("rm mx_reduced*")
#system("rm easyPubMed_data_01.txt*")
sum(collated$source=="pubmed")
sum(collated$source=="medrxiv")
### COVID-19 vaccine tracker
### Vaccine Centre, London School of Hygiene & Tropical Medicine
### Contact: Edward Parker, edward.parker@lshtm.ac.uk
### Shiny app code
### LOAD PACKAGES ---------------------------------------------------------------------------------
if(!require(data.table)) install.packages("data.table", repos = "http://cran.us.r-project.org")
if(!require(DT)) install.packages("DT", repos = "http://cran.us.r-project.org")
if(!require(dplyr)) install.packages("dplyr", repos = "http://cran.us.r-project.org")
if(!require(ggplot2)) install.packages("ggplot2", repos = "http://cran.us.r-project.org")
if(!require(plotly)) install.packages("plotly", repos = "http://cran.us.r-project.org")
if(!require(shiny)) install.packages("shiny", repos = "http://cran.us.r-project.org")
if(!require(shinythemes)) install.packages("shinythemes", repos = "http://cran.us.r-project.org")
if(!require(stringr)) install.packages("stringr", repos = "http://cran.us.r-project.org")
if(!require(stringi)) install.packages("stringi", repos = "http://cran.us.r-project.org")
if(!require(timevis)) install.packages("timevis", repos = "http://cran.us.r-project.org")
if(!require(RColorBrewer)) install.packages("RColorBrewer", repos = "http://cran.us.r-project.org")
if(!require(shinydashboard)) install.packages("shinydashboard", repos = "http://cran.us.r-project.org")
if(!require(writexl)) install.packages("writexl", repos = "http://cran.us.r-project.org")
if(!require(tidyverse)) install.packages("tidyverse", repos = "http://cran.us.r-project.org")
if(!require(readxl)) install.packages("readxl", repos = "http://cran.us.r-project.org")
if(!require(shinyWidgets)) install.packages("shinyWidgets", repos = "http://cran.us.r-project.org")
if(!require(cowplot)) install.packages("cowplot", repos = "http://cran.us.r-project.org")
if(!require(BiocManager)) install.packages("BiocManager", repos = "http://cran.us.r-project.org")
if(!require(leaflet)) install.packages("leaflet", repos = "http://cran.us.r-project.org")
if(!require(geojsonio)) install.packages("geojsonio", repos = "http://cran.us.r-project.org")
options(repos = BiocManager::repositories())
if(!require(ComplexHeatmap)) install.packages("ComplexHeatmap", repos = "https://bioconductor.org")
if(!require(scales)) install.packages("scales", repos = "https://bioconductor.org")
### Generate landscape inputs for each layer -------------------------------------------------------------------------------------
update_full = "05 July 2021"
update_equity = format(Sys.Date(), "%d %B %Y")
source("input_code/VaC_landscape.R")
source("input_code/VaC_efficacy_map.R")
source("input_code/VaC_living_review.R")
