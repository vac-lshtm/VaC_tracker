output$outcome_plot_efficacy <- renderPlot({
#reactive_db = db %>% filter(Identifier == "Oxford ChAdOx1 phase III")
db_piecharts = reactive_db()
db_piecharts$profile_plotgroup = "age"
db_piecharts$profile_plotgroup[db_piecharts$Efficacyprofileplotgroup %in% c("White", "Black", "Asian", "Mixed", "Other")] = "ethnicity"
db_piecharts$Efficacyprofileplotgroup = factor(db_piecharts$Efficacyprofileplotgroup, levels = db_piecharts$Efficacyprofileplotgroup)
g1 = ggplot(subset(db_piecharts, profile_plotgroup=="age"), aes(x="", y=as.numeric(Efficacyprofileplotpercentage), fill=Efficacyprofileplotgroup)) +
geom_bar(width = 1, stat = "identity") + coord_polar("y", start=0) + theme_minimal() + guides(fill=guide_legend(title="Age (y)")) +
scale_fill_brewer(palette = "Spectral") + theme(legend.text=element_text(size=9), legend.title=element_text(size=9)) +
ggtitle(paste0("N = ",format(as.numeric(db_piecharts$EfficacyN[1]),big.mark=","))) + theme(plot.title = element_text(hjust = -0, vjust = 4, face="italic", size=11)) +
theme(legend.position = "left", axis.text.x=element_blank(), panel.border = element_blank(), axis.title.x = element_blank(), axis.title.y = element_blank(), panel.grid=element_blank()) +
theme(plot.margin = unit(c(0, 0, 0, 0), "cm"))
g2 = ggplot(subset(db_piecharts, profile_plotgroup=="ethnicity"), aes(x="", y=as.numeric(Efficacyprofileplotpercentage), fill=Efficacyprofileplotgroup)) +
geom_bar(width = 1, stat = "identity") + coord_polar("y", start=0) + theme_minimal() + guides(fill=guide_legend(title="Ethnicity")) +
scale_fill_brewer(palette = "Spectral") + theme(legend.text=element_text(size=9), legend.title=element_text(size=9)) +
theme(legend.position = "left", axis.text.x=element_blank(), panel.border = element_blank(), axis.title.x = element_blank(), axis.title.y = element_blank(), panel.grid=element_blank()) +
theme(plot.margin = unit(c(0, 0, 0, 0), "cm"))
db_efficacy = subset(reactive_db(), Efficacy95CI!="Pending")
db_efficacy$Efficacygroup = factor(db_efficacy$Efficacygroup, levels=unique(db_efficacy$Efficacygroup))
db_efficacy$Efficacystratum = factor(db_efficacy$Efficacystratum, levels=unique(db_efficacy$Efficacystratum))
db_efficacy$Efficacysubset = factor(db_efficacy$Efficacysubset)
db_efficacy$Efficacysubset = fct_reorder(db_efficacy$Efficacysubset, -as.numeric(db_efficacy$Efficacyplotorder))
g3 = ggplot(db_efficacy, aes(x = Efficacysubset, y = as.numeric(VEmid), colour = factor(Efficacygroup), group = 1,
label = format(as.numeric(VEmid),nsmall=1))) +
geom_point(aes(size=as.numeric(Efficacycases)), alpha=0.8) + xlab("") + ylab("Efficacy, %") +
geom_errorbar(aes(ymin=as.numeric(VElower), ymax=as.numeric(VEupper)), width=0, size=0.8, alpha=0.8, position=position_dodge(.5, preserve = 'single')) +
scale_colour_manual(values = c("Symptomatic COVID-19" = covid_col, "Virologically confirmed COVID-19" = covid_col, "Asymptomatic SARS-CoV-2" = "#3B9AB2", "Moderate/Severe COVID-19" = "#9970ab", "Severe COVID-19" = "#9970ab")) +
geom_text(nudge_x = 0.3, nudge_y = -10, show.legend=FALSE, size=3.5) + ylim(-10,100) + ggtitle(" ") +
theme_bw() + coord_flip() + facet_grid(Efficacystratum~., scales="free_y", space = "free_y") +
guides(colour=guide_legend(title="Endpoint", order=2), size=guide_legend(title="N cases")) +
theme(strip.background = element_blank(), strip.text.y = element_text(size=0),
text = element_text(size=11), legend.text=element_text(size=9))
plot_grid(plot_grid(g1, g2, ncol=1, nrow=3, rel_heights = c(1.1,1,1.1),align="v"), g3, ncol=2, rel_widths = c(1,3))
}, res = 100)
output$efficacy_table <- DT::renderDataTable({
db_efficacy <- subset(reactive_db(), !is.na(Efficacyendpoint))
summary <- data.frame(
"Group" =  db_efficacy$Efficacysubset,
"Endpoint" =  db_efficacy$Efficacystratum,
"N_total" = format(as.numeric(db_efficacy$EfficacyN), big.mark=","),
"N_cases" = db_efficacy$Efficacycases,
"Cases_vaccine" = db_efficacy$CasesinvaccinegroupsnN,
"Cases_control" = db_efficacy$CasesincontrolgroupsnN,
"Efficacy" = db_efficacy$Efficacy95CI
)
names(summary) = c("Group", "Endpoint", "N<br>(total)", "N<br>(cases)", "Cases - vaccine,<br>n/N (%)", "Cases - control,<br>n/N (%)", "Efficacy<br>(95% CI)")
DT::datatable(summary, extensions = 'RowGroup', rownames=F, escape = FALSE,
options = list(dom = 't', ordering=F, rowGroup = list(dataSrc = 1), pageLength = 20, columnDefs = list(list(visible=FALSE, targets=1)))) %>%
formatStyle(columns = 7, fontWeight = 'bold')
})
output$efficacy_population <- DT::renderDataTable({
db_table = subset(reactive_db(), !is.na(Efficacypopulationcharacteristic))
summary <- data.frame(
"Characteristic" = db_table$Efficacypopulationcharacteristic,
"Distribution" = db_table$Efficacypopulationprofile
)
DT::datatable(summary[,1:2], rownames=F, escape = FALSE, options = list(dom = 't', ordering=F,
autoWidth = FALSE, columnDefs = list(list(width = "65%", targets = 1)))) %>%
formatStyle(columns = c(1:2), fontSize = '90%')
})
### (5) Antibody response ###
db_outcome <- reactive({
db_outcome <- reactive_db() %>% filter(Outcome == input$select_outcome & Group=="Antibody")
db_outcome$Plotgroup = factor(db_outcome$Plotgroup)
db_outcome$Plotgroup = fct_reorder(db_outcome$Plotgroup, db_outcome$Plotorder)
db_outcome
})
output$outcome_assay <- renderUI({
if (db_outcome()$Outcome[1]=="Not applicable") { return(NULL) } else { HTML("<b>Assay: </b>",db_outcome()$Assay[1],"<br>") }
})
output$outcome_timing <- renderUI({
if (db_outcome()$Outcome[1]=="Not applicable") { return(NULL) } else { HTML("<b>Timing: </b>",db_outcome()$Timing[1],"<br>") }
})
output$outcome_units <- renderUI({
if (db_outcome()$Outcome[1]=="Not applicable") { return(NULL) } else { HTML("<b>Units: </b>",db_outcome()$Units[1],"<br>") }
})
output$outcome_binary <- renderUI({
if (db_outcome()$Binaryresponsedefinition[1]=="N/A") { return(NULL) }
else { HTML(paste0("<b>Response definition: </b>",db_outcome()$Binaryresponsedefinition[1]),"<br>") }
})
output$outcome_extraction_flag <- renderUI({
if (db_outcome()$PlotDigitizerrequired[1]=="No") { return(NULL) } else { HTML("<em><span style=\"color:orange\">Plot Digitizer software required for data extraction; some values are therefore approximations</span></em><br>") }
})
output$outcome_small_group_flag <- renderUI({
if (db_outcome()$Smallgroupflag[1]=="No") { return(NULL) } else { HTML(paste0("<em><span style=\"color:orange\">Data available for <10 partipiants in one or more groups</span></em><br>")) }
})
output$outcome_plot <- renderPlot({
db_plot = db_outcome()
y_lowerlim = 10^floor(log10(min(c(db_plot$Lowerpre, db_plot$Lowerpost), na.rm=T)))
y_upperlim = 10^ceiling(log10(max(c(db_plot$Upperpre, db_plot$Upperpost), na.rm=T)))
if (reactive_db()$Platform[1]=="RNA") { palette = brewer.pal(9, "Blues")[c(3:9, 8:3)] }
if (reactive_db()$Platform[1]=="DNA") { palette = brewer.pal(9, "Blues")[c(9:3, 3:8)] }
if (reactive_db()$Platform[1]=="Vector (non-replicating)") { palette = brewer.pal(9, "Oranges")[c(3:9, 8:3)] }
if (reactive_db()$Platform[1]=="Inactivated") { palette = brewer.pal(9, "Greens")[c(3:9, 8:3)] }
if (reactive_db()$Platform[1]=="Protein subunit") { palette = brewer.pal(9, "Purples")[c(3:9, 8:3)] }
if (reactive_db()$Platform[1]=="Virus-like particle") { palette = brewer.pal(9, "Purples")[c(9:3, 3:8)] }
ngroup = length(unique(db_plot$Plotgroup))
if (y_upperlim==1000) { nudge = 0.06 } else { nudge = 0.07 }
# plot continuous outcome (pre)
g1 = ggplot(db_plot, aes(x = Plotgroup, y = as.numeric(Midpre), colour = Plotgroup, group = 1,
label = format(as.numeric(Midpre), big.mark=","))) +
geom_point(size = 5, alpha=0.8) +
geom_errorbar(aes(ymin=as.numeric(Lowerpre), ymax=as.numeric(Upperpre)), width=0, size=0.8, alpha=0.8) +
theme_bw() + scale_colour_manual(values = palette[1:ngroup]) +
ylab(db_plot$Yaxislabel[1]) + xlab("") + scale_y_log10(limits=c(y_lowerlim,y_upperlim), labels = trans_format("log10", math_format(10^.x))) +
ggtitle("Levels (pre)") +
theme(legend.position="none", text = element_text(size=15), axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(size = 14, face = "italic"), axis.title.y = element_text(size = 13))
# plot continuous outcome (post)
g2 = ggplot(db_plot, aes(x = Plotgroup, y = as.numeric(Midpost), colour = Plotgroup, group = 1,
label = format(as.numeric(Midpost), big.mark=","))) +
geom_point(size = 5, alpha=0.8) +
geom_errorbar(aes(ymin=as.numeric(Lowerpost), ymax=as.numeric(Upperpost)), width=0, size=0.8, alpha=0.8) +
theme_bw() + scale_colour_manual(values = palette[1:ngroup]) +
ylab(" ") + xlab("") + scale_y_log10(limits=c(y_lowerlim,y_upperlim), labels = trans_format("log10", math_format(10^.x))) +
ggtitle("Levels (post)") +
theme(legend.position="none", text = element_text(size=15), axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(size = 14, face = "italic"))
# plot binary outcome
g3 = ggplot(db_plot, aes(x = Plotgroup, y = as.numeric(Responseplot), group = 1,
fill = Plotgroup, label = Responseplot)) +
geom_bar(stat="identity") + geom_text(nudge_y = 8, aes(colour = Plotgroup), size=4) +
theme_bw() +
scale_fill_manual(values = palette[1:ngroup]) + scale_colour_manual(values = palette[1:ngroup]) +
ylab("%") + xlab("") +
ggtitle("Response rate") + scale_y_continuous(breaks=c(0,25,50,75,100), limits=c(0, 115)) +
theme(legend.position="none", text = element_text(size=15), axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(size = 14, face = "italic"), axis.title.y = element_text(size = 13))
# create grid plot
if (all(db_plot$Levelpre95CI!="N/A") & all(db_plot$Levelpost95CI!="N/A") & all(db_plot$Responseplot=="N/A")) { plot_grid(g1, g2, ncol=3) }
else if (all(db_plot$Levelpre95CI=="N/A") & all(db_plot$Levelpost95CI!="N/A") & all(db_plot$Responseplot=="N/A")) { plot_grid(g2 + ylab(db_plot$Yaxislabel[1]), ncol=3) }
else if (all(db_plot$Levelpre95CI=="N/A") & all(db_plot$Levelpost95CI!="N/A") & all(db_plot$Responseplot!="N/A")) { plot_grid(g2 + ylab(db_plot$Yaxislabel[1]), g3, ncol=3) }
else if (all(db_plot$Levelpre95CI=="N/A") & all(db_plot$Levelpost95CI=="N/A") & all(db_plot$Responseplot!="N/A")) { plot_grid(g3, ncol=3) }
else { plot_grid(g1, g2, g3, ncol=3) }
})
output$immunogenicity_table <- DT::renderDataTable({
db_plot = db_outcome()
summary <- data.frame(
"Group" =  db_plot$Plotgroup,
"N_pre" = db_plot$Nreportedpre,
"Ab_pre" = db_plot$Levelpre95CI,
"N_post" = db_plot$Nreportedpost,
"Continuous_outcome" = db_plot$Levelpost95CI,
"Response_rate" = db_plot$ResponseratenN
)
if (all(db_plot$ResponseratenN=="N/A")) {
custom_header = htmltools::withTags(table(class = 'display',
thead(tr(
th(rowspan = 2, 'Group'),
th(colspan = 2, 'Pre-vaccination'),
th(colspan = 2, 'Post-vaccination')
),
tr(lapply(rep(c('N', 'Levels'), 2), th))
)))
DT::datatable(summary[,1:5], container = custom_header, rownames=F, escape = FALSE, options = list(dom = 't', ordering=F)) %>%
formatStyle(columns = c(1:5), fontSize = '90%')
} else {
custom_header = htmltools::withTags(table(class = 'display',
thead(tr(
th(rowspan = 2, 'Group'),
th(colspan = 2, 'Pre-vaccination'),
th(colspan = 2, 'Post-vaccination'),
th(rowspan = 2, 'Response rate')
),
tr(lapply(rep(c('N', 'Levels'), 2), th))
)))
DT::datatable(summary, container = custom_header, rownames=F, escape = FALSE, options = list(dom = 't', ordering=F)) %>%
formatStyle(columns = c(1:6), fontSize = '90%')
}
})
### (6) T-cell response ###
db_outcome_T <- reactive({
db_outcome <- reactive_db() %>% filter(Outcome == input$select_outcome_T & Group=="T-cell")
db_outcome$Plotgroup = factor(db_outcome$Plotgroup)
db_outcome$Plotgroup = fct_reorder(db_outcome$Plotgroup, db_outcome$Plotorder)
db_outcome
})
output$outcome_assay_T <- renderUI({
if (db_outcome_T()$Outcome[1]=="Not applicable") { return(NULL) } else { HTML("<b>Assay: </b>",db_outcome_T()$Assay[1],"<br>") }
})
output$outcome_timing_T <- renderUI({
if (db_outcome_T()$Outcome[1]=="Not applicable") { return(NULL) } else { HTML("<b>Timing: </b>",db_outcome_T()$Timing[1],"<br>") }
})
output$outcome_units_T <- renderUI({
if (db_outcome_T()$Outcome[1]=="Not applicable") { return(NULL) } else { HTML("<b>Units: </b>",db_outcome_T()$Units[1],"<br>") }
})
output$outcome_binary_T <- renderUI({
if (db_outcome_T()$Binaryresponsedefinition[1]=="N/A") { return(NULL) }
else { HTML("<b>Response definition: </b>",db_outcome_T()$Binaryresponsedefinition[1],"<br>") }
})
output$outcome_Th1_Th2 <- renderUI({
if (db_outcome_T()$Outcome[1]=="Not applicable") { return(NULL) } else { HTML("<b>Th1/Th2 profile: </b>",reactive_db()$Th1Th2bias[1],"<br><br>") }
})
output$outcome_extraction_flag_T <- renderUI({
if (db_outcome_T()$PlotDigitizerrequired[1]=="No") { return(NULL) } else { HTML("<em><span style=\"color:orange\">Plot Digitizer software required for data extraction; some values are therefore approximations</span></em><br>") }
})
output$outcome_small_group_flag_T <- renderUI({
if (db_outcome_T()$Smallgroupflag[1]=="No") { return(NULL) } else { HTML(paste0("<em><span style=\"color:orange\">Data available for <10 partipiants in one or more groups</span></em><br>")) }
})
output$outcome_plot_T <- renderPlot({
db_plot = db_outcome_T()
if (reactive_db()$Platform[1]=="RNA") { palette = brewer.pal(9, "Blues")[c(3:9, 8:3)] }
if (reactive_db()$Platform[1]=="DNA") { palette = brewer.pal(9, "Blues")[c(9:3, 3:8)] }
if (reactive_db()$Platform[1]=="Vector (non-replicating)") { palette = brewer.pal(9, "Oranges")[c(3:9, 8:3)] }
if (reactive_db()$Platform[1]=="Inactivated") { palette = brewer.pal(9, "Greens")[c(3:9, 8:3)] }
if (reactive_db()$Platform[1]=="Protein subunit") { palette = brewer.pal(9, "Purples")[c(3:9, 8:3)] }
if (reactive_db()$Platform[1]=="Virus-like particle") { palette = brewer.pal(9, "Purples")[c(9:3, 3:8)] }
ngroup = length(unique(db_plot$Plotgroup))
if (db_plot$Plotmax[1]=="N/A" & all(all(db_plot$Levelpost95CI!="N/A"))) {
y_lowerlim = 10^floor(log10(min(c(as.numeric(db_plot$Lowerpre), as.numeric(db_plot$Lowerpost)), na.rm=T)))
y_upperlim = 10^ceiling(log10(max(c(as.numeric(db_plot$Upperpre), as.numeric(db_plot$Upperpost)), na.rm=T)))
if (y_upperlim==1000) { nudge = 0.06 } else if (y_upperlim==1) { nudge = 0.5 } else { nudge = 0.07 }
# plot continuous outcome (pre)
g1 = ggplot(db_plot, aes(x = Plotgroup, y = as.numeric(Midpre), colour = Plotgroup, group = 1,
label = format(as.numeric(Midpre), big.mark=","))) +
geom_point(size = 5, alpha=0.8) +
geom_errorbar(aes(ymin=as.numeric(Lowerpre), ymax=as.numeric(Upperpre)), width=0, size=0.8, alpha=0.8) +
theme_bw() + scale_colour_manual(values = palette[1:ngroup]) +
ylab(db_plot$Yaxislabel[1]) + xlab("") + scale_y_log10(limits=c(y_lowerlim,y_upperlim), labels = trans_format("log10", math_format(10^.x))) +
ggtitle("Levels (pre)") +
theme(legend.position="none", text = element_text(size=15), axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(size = 14, face = "italic"), axis.title.y = element_text(size = 13))
# plot continuous outcome (post)
g2 = ggplot(db_plot, aes(x = Plotgroup, y = as.numeric(Midpost), colour = Plotgroup, group = 1,
label = format(as.numeric(Midpost), big.mark=","))) +
geom_point(size = 5, alpha=0.8) +
geom_errorbar(aes(ymin=as.numeric(Lowerpost), ymax=as.numeric(Upperpost)), width=0, size=0.8, alpha=0.8) +
theme_bw() + scale_colour_manual(values = palette[1:ngroup]) +
ylab(" ") + xlab("") + scale_y_log10(limits=c(y_lowerlim,y_upperlim), labels = trans_format("log10", math_format(10^.x))) +
ggtitle("Levels (post)") +
theme(legend.position="none", text = element_text(size=15), axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(size = 14, face = "italic"), axis.title.y = element_text(size = 13))
} else if (db_plot$Plotmax[1]!="N/A" & all(all(db_plot$Levelpost95CI!="N/A"))) {
y_lowerlim = -0.01
y_upperlim = as.numeric(db_plot$Plotmax[1])
ngroup = length(unique(db_plot$Plotgroup))
# plot continuous outcome (pre)
g1 = ggplot(db_plot, aes(x = Plotgroup, y = as.numeric(Midpre), colour = Plotgroup, group = 1,
label = format(as.numeric(Midpre), big.mark=","))) +
geom_point(size = 5, alpha=0.8) +
geom_errorbar(aes(ymin=as.numeric(Lowerpre), ymax=as.numeric(Upperpre)), width=0, size=0.8, alpha=0.8) +
theme_bw() + scale_colour_manual(values = palette[1:ngroup]) +
ylab(db_plot$Yaxislabel[1]) + xlab("") + ylim(y_lowerlim,y_upperlim) +
ggtitle("Levels (pre)") +
theme(legend.position="none", text = element_text(size=15), axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(size = 14, face = "italic"), axis.title.y = element_text(size = 13))
# plot continuous outcome (post)
g2 = ggplot(db_plot, aes(x = Plotgroup, y = as.numeric(Midpost), colour = Plotgroup, group = 1,
label = format(as.numeric(Midpost), big.mark=","))) +
geom_point(size = 5, alpha=0.8) +
geom_errorbar(aes(ymin=as.numeric(Lowerpost), ymax=as.numeric(Upperpost)), width=0, size=0.8, alpha=0.8) +
theme_bw() + scale_colour_manual(values = palette[1:ngroup]) +
ylab(" ") + xlab("") + ylim(y_lowerlim,y_upperlim) +
ggtitle("Levels (post)") +
theme(legend.position="none", text = element_text(size=15), axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(size = 14, face = "italic"), axis.title.y = element_text(size = 13))
}
# plot binary outcome
g3 = ggplot(db_plot, aes(x = Plotgroup, y = as.numeric(Responseplot), group = 1,
fill = Plotgroup, label = Responseplot)) +
geom_bar(stat="identity") + geom_text(nudge_y = 8, aes(colour = Plotgroup), size=4) +
theme_bw() +
scale_fill_manual(values = palette[1:ngroup]) + scale_colour_manual(values = palette[1:ngroup]) +
ylab("%") + xlab("") +
ggtitle("Response rate") + scale_y_continuous(breaks=c(0,25,50,75,100), limits=c(0, 115)) +
theme(legend.position="none", text = element_text(size=15), axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(size = 14, face = "italic"), axis.title.y = element_text(size = 13))
# create grid plot
if (all(db_plot$Levelpre95CI!="N/A") & all(db_plot$Levelpost95CI!="N/A") & all(db_plot$Responseplot=="N/A")) { plot_grid(g1, g2, ncol=3) }
else if (all(db_plot$Levelpre95CI=="N/A") & all(db_plot$Levelpost95CI!="N/A") & all(db_plot$Responseplot=="N/A")) { plot_grid(g2 + ylab(db_plot$Yaxislabel[1]), ncol=3) }
else if (all(db_plot$Levelpre95CI=="N/A") & all(db_plot$Levelpost95CI!="N/A") & all(db_plot$Responseplot!="N/A")) { plot_grid(g2 + ylab(db_plot$Yaxislabel[1]), g3, ncol=3) }
else if (all(db_plot$Levelpre95CI=="N/A") & all(db_plot$Levelpost95CI=="N/A") & all(db_plot$Responseplot!="N/A")) { plot_grid(g3, ncol=3) }
else { plot_grid(g1, g2, g3, ncol=3) }
})
output$immunogenicity_table_T <- DT::renderDataTable({
db_plot = db_outcome_T()
summary <- data.frame(
"Group" =  db_plot$Plotgroup,
"N_pre" = db_plot$Nreportedpre,
"Ab_pre" = db_plot$Levelpre95CI,
"N_post" = db_plot$Nreportedpost,
"Continuous_outcome" = db_plot$Levelpost95CI,
"Response_rate" = db_plot$ResponseratenN
)
if (all(db_plot$ResponseratenN=="N/A")) {
custom_header = htmltools::withTags(table(class = 'display',
thead(tr(
th(rowspan = 2, 'Group'),
th(colspan = 2, 'Pre-vaccination'),
th(colspan = 2, 'Post-vaccination')
),
tr(lapply(rep(c('N', 'Levels'), 2), th))
)))
DT::datatable(summary[,1:5], container = custom_header, rownames=F, escape = FALSE, options = list(dom = 't', ordering=F)) %>%
formatStyle(columns = c(1:5), fontSize = '90%')
} else {
custom_header = htmltools::withTags(table(class = 'display',
thead(tr(
th(rowspan = 2, 'Group'),
th(colspan = 2, 'Pre-vaccination'),
th(colspan = 2, 'Post-vaccination'),
th(rowspan = 2, 'Response rate')
),
tr(lapply(rep(c('N', 'Levels'), 2), th))
)))
DT::datatable(summary, container = custom_header, rownames=F, escape = FALSE, options = list(dom = 't', ordering=F)) %>%
formatStyle(columns = c(1:6), fontSize = '90%')
}
})
### (6) Subgroup analysis ###
db_outcome_subgroup <- reactive({
db_outcome <- reactive_db() %>% filter(Outcome == input$select_outcome_subgroup)
db_outcome$Plotgroup = factor(db_outcome$Plotgroup)
db_outcome$Plotgroup = fct_reorder(db_outcome$Plotgroup, db_outcome$Plotorder)
db_outcome
})
output$outcome_assay_subgroup <- renderUI({
if (reactive_db()$Subgroupsummary[1]=="Not applicable") { return(NULL) }
else { HTML(paste0("<b>Assay: </b>", db_outcome_subgroup()$Assay[1], "<br>")) }
})
output$outcome_timing_subgroup <- renderUI({
if (reactive_db()$Subgroupsummary[1]=="Not applicable") { return(NULL) }
else { HTML(paste0("<b>Timing: </b>", db_outcome_subgroup()$Timing[1], "<br>")) }
})
output$outcome_units_subgroup <- renderUI({
if (reactive_db()$Subgroupsummary[1]=="Not applicable") { return(NULL) }
else { HTML(paste0("<b>Units: </b>", db_outcome_subgroup()$Units[1], "<br>")) }
})
output$outcome_binary_subgroup <- renderUI({
if (reactive_db()$Subgroupsummary[1]=="Not applicable") { return(NULL) }
else { HTML(paste0("<b>Response definition: </b>", db_outcome_subgroup()$Binaryresponsedefinition[1], "<br>")) }
})
output$subgroup_conclusion <- renderUI({
if (reactive_db()$Subgroupsummary[1]=="Not applicable") { return(NULL) }
else { HTML(paste0("<br><b>Conclusion: </b><br>", reactive_db()$Conclusion[1], "<br><br>")) }
})
output$subgroup_text <- renderUI({
if (reactive_db()$Subgroupsummary[1]=="Not applicable") { return(NULL) }
else {
HTML(paste0("<i>",reactive_db()$Subgroupsummary[1],"</i><br><br>"))
}
})
output$subgroup_table <- DT::renderDataTable({
if (reactive_db()$Subgroupsummary[1]=="Not applicable") { return(NULL) }
else {
db_plot = reactive_db() %>% filter(Outcome == input$select_outcome_subgroup)
summary <- data.frame(
"Group" =  db_plot$Plotgroup,
"Subgroup_1_N" = db_plot$Group1N,
"Subgroup_1_level" = db_plot$Group1levelpost95CI,
"Subgroup_1_binary" = db_plot$Group1responseratenN,
"Subgroup_2_N" = db_plot$Group2N,
"Subgroup_2_level" = db_plot$Group2levelpost95CI,
"Subgroup_1_binary" = db_plot$Group2responseratenN
)
custom_header = htmltools::withTags(table(class = 'display',
thead(tr(
th(rowspan = 2, 'Group'),
th(colspan = 3, reactive_db()$Group1label[1]),
th(colspan = 3, reactive_db()$Group2label[1])
),
tr(lapply(rep(c('N', 'Levels (post)', 'Response rate'), 2), th))
)))
DT::datatable(summary, container = custom_header, rownames=F, escape = FALSE, options = list(dom = 't', ordering=F))  %>%
formatStyle(columns = c(1:8), fontSize = '90%')
}
})
# final additions
output$other_cofactors <- renderUI({
other <- reactive_db()$Othercofactors[!is.na(reactive_db()$Othercofactors) & reactive_db()$Othercofactors!="N/A"]
other_html = paste0("<li>",other,"</li>")
other_html = paste0("<h4>Factors associated with vaccine response</h4><ul>", paste(other_html, collapse = ""), "</ul><br>")
if (length(other)==0) { return(NULL) }
else { HTML(str_replace_all(other_html, "\\)\\,\\)", "))")) }
})
output$other_endpoints <- renderUI({
other <- reactive_db()$Otherendpoints[!is.na(reactive_db()$Otherendpoints) & reactive_db()$Otherendpoints!="N/A"]
other_html = paste0("<li>",other,"</li>")
other_html = paste0("<h4>Other outcomes measured</h4><ul>", paste(other_html, collapse = ""), "</ul>")
if (length(other)==0) { return(NULL) }
else { HTML(str_replace_all(other_html, "\\)\\,\\)", "))")) }
})
output$trial_next_steps <- renderUI({ HTML(reactive_db()$Nextstepsproposed[1]) })
# update outcome measurement options - antibody
observeEvent(input$select_trial, {
updatePickerInput(session = session, inputId = "select_outcome",
choices = unique(reactive_db()$Outcome[reactive_db()$Group=="Antibody" & !is.na(reactive_db()$Group)]), selected = reactive_db()$Outcome[reactive_db()$Group=="Antibody"][1])
}, ignoreInit = TRUE)
# update outcome measurement options - T cell endpoints
observeEvent(input$select_trial, {
updatePickerInput(session = session, inputId = "select_outcome_T",
choices = unique(reactive_db()$Outcome[reactive_db()$Group=="T-cell" & !is.na(reactive_db()$Group)]), selected = reactive_db()$Outcome[reactive_db()$Group=="T-cell"][1])
}, ignoreInit = TRUE)
# update outcome measurement options - efficacy endpoints
observeEvent(input$select_trial, {
updatePickerInput(session = session, inputId = "select_outcome_efficacy",
choices = unique(reactive_db()$Efficacyendpoint, selected = reactive_db()$Efficacyendpoint[1]))
}, ignoreInit = TRUE)
# update outcome measurement options - subgroup
observeEvent(input$select_trial, {
if (reactive_db()$Subgroupsummary[1]=="Not applicable") {
updatePickerInput(session = session, inputId = "select_outcome_subgroup",
choices = "Not applicable", selected = "Not applicable")
}
else {
updatePickerInput(session = session, inputId = "select_outcome_subgroup",
choices = unique(reactive_db()$Outcome), selected = reactive_db()$Outcome[1])
}
}, ignoreInit = TRUE)
###########################
### IMPLEMENTATION PAGE ###
###########################
output$summary_matrix <- renderPlot({ summary_matrix })
output$implementation_table <- DT::renderDataTable({
if (length(input$implementation_select_vaccine)==1) {
imp_subset <- imp %>% filter(Vaccine %in% input$implementation_select_vaccine)
colnames(imp_subset) = c("","",as.character(imp_subset$Vaccine[1]))
imp_subset = imp_subset[,c(1,3)]
} else {
imp_subset <- imp %>% filter(Vaccine %in% input$implementation_select_vaccine[1])
imp_subset = imp_subset[,c(1,3)]
for (i in 2:length(input$implementation_select_vaccine)) {
imp_subset_new <- imp %>% filter(Vaccine %in% input$implementation_select_vaccine[i])
imp_subset = cbind(imp_subset, imp_subset_new[,3])
}
colnames(imp_subset) = c("",input$implementation_select_vaccine)
}
col_width = paste0(round(100/ncol(imp_subset),0),"%")
DT::datatable(imp_subset, rownames=F, escape = FALSE,
options = list(dom = 't', ordering=F, pageLength = 50,
autoWidth = FALSE, columnDefs = list(list(width = col_width, targets = "_all")))) %>%
formatStyle(columns = c(1:6), fontSize = '90%') %>%
formatStyle(columns = 1, fontWeight = 'bold')
})
# equity plot
equity_input <- reactive({
equity = equity_full
selected_date = format(as.Date(input$equity_date, format="%d %b %y"), "%Y-%m-%d")
equity$date[is.na(equity$date)] = selected_date
equity <- equity %>% filter(date == selected_date)
if ("hic" %in% input$equity_group==FALSE) { equity = subset(equity, income_group!="High income") }
if ("umic" %in% input$equity_group==FALSE) { equity = subset(equity, income_group!="Upper middle income") }
if ("lmic" %in% input$equity_group==FALSE) { equity = subset(equity, income_group!="Lower middle income") }
if ("lic" %in% input$equity_group==FALSE) { equity = subset(equity, income_group!="Low income") }
if (nrow(equity)==0) {
equity = equity_full
equity$date[is.na(equity$date)] = selected_date
equity <- equity %>% filter(date == selected_date)
}
if (input$equity_outcome=="% vaccinated with at least 1 dose") { equity$y = equity$people_vaccinated_per_hundred }
if (input$equity_outcome=="% fully vaccinated") { equity$y = equity$people_fully_vaccinated_per_hundred }
if (input$equity_outcome=="Total vaccines per hundred people") { equity$y = equity$total_vaccinations_per_hundred }
if (input$equity_outcome=="Total vaccines") { equity$y = equity$total_vaccinations }
equity = subset(equity, population>1e6 & !is.na(gdp_2019))
equity$y[is.na(equity$y)] = 0
equity
})
output$equity_sum <- renderText({ round(sum(equity_input()$total_vaccinations, na.rm=TRUE)/1e6,0)})
output$equity_date_clean <-  renderText({ format(as.Date(input$equity_date, format="%d %b %y"), "%d %b %Y") })
output$equity_plot <- renderPlotly({
if (input$equity_outcome=="% vaccinated with at least 1 dose") {
ymax = max(equity_full$people_vaccinated_per_hundred, na.rm=TRUE)+10
units = "%"
}
if (input$equity_outcome=="% fully vaccinated") {
ymax = max(equity_full$people_fully_vaccinated_per_hundred, na.rm=TRUE)+10
units = "%"
}
if (input$equity_outcome=="Total vaccines per hundred people") {
ymax = max(equity_full$total_vaccinations_per_hundred, na.rm=TRUE)+10
units = " vaccine doses"
}
# if (input$equity_outcome=="Total vaccines") {
#   ymax = max(equity_full$total_vaccinations, na.rm=TRUE)
# }
g1 = ggplot(equity_input(), aes(gdp_2019, y, fill=factor(income_group), size=population^(1/2), group = 1,
text = paste0("<b>",round(y,1),units,"</b>",
"\n<i>",country,"</i>",
"\nVaccine(s): ",vaccines))) + #"\nPopulation: ", round(population/1e6,1), "M")
theme_bw() +
geom_point(alpha=0.5, stroke = 0.2) + ylab(input$equity_outcome) +
scale_fill_manual(values = c("High income" =  "#B40F20", "Upper middle income" = "#8856a7", "Lower middle income" = "#EBCC2A", "Low income" = "#3B9AB2")) +
theme(legend.title = element_blank()) +
scale_x_continuous(trans = log2_trans(), breaks = trans_breaks("log2", function(x) 2^x), limits = c(min(equity_full$gdp_2019, na.rm=T), max(equity_full$gdp_2019, na.rm=T)))  +
scale_size(range = c(0, 12)) + theme(text = element_text(size=11), legend.position = "none") +
xlab("Income (GDP/capita in USD)") + ylim(0,ymax)
ggplotly(g1, tooltip = c("text")) %>% layout(hoverlabel = list(font=list(size=15)))
})
#################
### FAQs PAGE ###
#################
output$vaccine_types <- DT::renderDataTable({
DT::datatable(data.table::fread("input_data/VaC_LSHTM_vaccine_types.csv"),
rownames=F, options = list(dom = 't', ordering=F,
columnDefs = list(list(width = "65%", targets = 1)))) %>%
formatStyle(columns = c(1:3), fontSize = '90%') %>%
formatStyle(columns = 1, fontWeight = 'bold')
})
# render table even when hidden to improve loading speed
outputOptions(output, "implementation_table", suspendWhenHidden = FALSE)
outputOptions(output, "trial_table", suspendWhenHidden = FALSE)
outputOptions(output, "eligible_studies", suspendWhenHidden = FALSE)
outputOptions(output, "search_log", suspendWhenHidden = FALSE)
outputOptions(output, "vaccine_types", suspendWhenHidden = FALSE)
outputOptions(output, "vaccine_timeline", suspendWhenHidden = FALSE)
outputOptions(output, "equity_sum", suspendWhenHidden = FALSE)
outputOptions(output, "equity_plot", suspendWhenHidden = FALSE)
}
#shinyApp(ui = ui, server = server)
runApp(shinyApp(ui, server), launch.browser = TRUE)
#library(rsconnect)
#deployApp(account="vac-lshtm")
