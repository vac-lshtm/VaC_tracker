pm_results <- data.frame(
ID = pm_df$pmid,
title = pm_df$title,
abstract = pm_df$abstract,
date = paste0(pm_df$year,"-",pm_df$month,"-",pm_df$day),
doi = pm_df$doi,
author_corresponding = paste(pm_df$firstname,pm_df$lastname),
author_corresponding_institution = pm_df$address,
source = "pubmed"
)
# collate results
collated = rbind(mx_reduced, pm_results)
write.csv(collated, "pre_abstract_screening_08Sep2021_full.csv")  ### UPDATE ###
#system("rm pubmed_*")
#system("rm mx_reduced*")
#system("rm easyPubMed_data_01.txt*")
# load packages
#library(dplyr)
#library(formattable)
library(medrxivr)
install.packages("medrxivr")
# load packages
#library(dplyr)
#library(formattable)
library(medrxivr)
install.packages("medrxivr")
# load packages
#library(dplyr)
#library(formattable)
library(medrxivr)
no# search medrxiv
# search medrxiv
term1 <- c("[Cc]oronavirus","COVID*","SARS*") # OR
term2 <- c("[Vv]accin*", "[Ii]mmunis*", "[[Iimmuniz*") # OR
term3 <- c("[Aa]dditional", "[Ee]xtra", "[Th]ird", "[Th]ree", "[Bb]oost*") # OR
query <- list(term1, term2, term3) # AND
mx_results <- mx_search(data = mx_snapshot(), query = query, from_date = "2020-07-01", to_date = "2021-09-17") ### UPDATE ###
library(dplyr)
mx_reduced = mx_results %>% select(c(ID, title, abstract, date, doi, author_corresponding,
author_corresponding_institution))
mx_reduced$source = "medrxiv"
write.csv(mx_reduced, "mx_additional_dose_17Sep2021.csv")
nrow(mx_reduced)
# load packages
#library(formattable)
library(medrxivr)
library(dplyr)
# search medrxiv
term1 <- c("[Cc]oronavirus","COVID*","SARS*") # OR
term2 <- c("[Vv]accin*", "[Ii]mmunis*", "[[Iimmuniz*") # OR
term3 <- c("[Aa]dditional", "[Ee]xtra", "[Th]ird", "[Th]ree", "[Bb]oost*") # OR
query <- list(term1, term2, term3) # AND
mx_results <- mx_search(data = mx_snapshot(), query = query, from_date = "2020-07-01", to_date = "2021-09-17") ### UPDATE ###
mx_reduced = mx_results %>% select(c(ID, title, abstract, date, doi, author_corresponding,
author_corresponding_institution))
mx_reduced$source = "medrxiv"
write.csv(mx_reduced, "mx_additional_dose_17Sep2021.csv")
# search medrxiv
term1 <- c("coronavirus","COVID*","SARS*") # OR
term2 <- c("vaccin*", "immunis*", "immuniz*") # OR
term3 <- c("additional dose*", "extra dose*", "third dose", "three doses", "boost*") # OR
query <- list(term1, term2, term3) # AND
mx_results <- mx_search(data = mx_snapshot(), query = query, from_date = "2020-07-01", to_date = "2021-09-17") ### UPDATE ###
mx_reduced = mx_results %>% select(c(ID, title, abstract, date, doi, author_corresponding,
author_corresponding_institution))
mx_reduced$source = "medrxiv"
write.csv(mx_reduced, "mx_additional_dose_17Sep2021.csv")
# search medrxiv
term1 <- c("coronavirus","COVID*","SARS*") # OR
term2 <- c("vaccin*") # OR
term3 <- c("additional*", "extra*", "third", "three", "boost*") # OR
term4 <- c("dose*") # OR
query <- list(term1, term2, term3, term4) # AND
mx_results <- mx_search(data = mx_snapshot(), auto_caps = TRUE, query = query, from_date = "2020-07-01", to_date = "2021-09-17") ### UPDATE ###
mx_reduced = mx_results %>% select(c(ID, title, abstract, date, doi, author_corresponding,
author_corresponding_institution))
mx_reduced$source = "medrxiv"
write.csv(mx_reduced, "mx_additional_dose_17Sep2021.csv")
# search medrxiv
term1 <- c("coronavirus","COVID*","SARS*") # OR
term2 <- c("vaccine") # OR
term3 <- c("additional", "extra", "third", "three", "boost", "booster", "boosting") # OR
term4 <- c("dose", "doses") # OR
query <- list(term1, term2, term3, term4) # AND
mx_results <- mx_search(data = mx_snapshot(), auto_caps = TRUE, query = query, from_date = "2020-07-01") ### UPDATE ###
mx_reduced = mx_results %>% select(c(ID, title, abstract, date, doi, author_corresponding,
author_corresponding_institution))
mx_reduced$source = "medrxiv"
write.csv(mx_reduced, "mx_additional_dose_17Sep2021.csv")
# search medrxiv
term1 <- c("coronavirus","COVID-19","SARS-CoV-2") # OR
term2 <- c("vaccine") # OR
term3 <- c("additional", "extra", "third", "three", "boost", "booster", "boosting") # OR
term4 <- c("dose", "doses") # OR
query <- list(term1, term2, term3, term4) # AND
mx_results <- mx_search(data = mx_snapshot(), auto_caps = TRUE, query = query, from_date = "2020-07-01") ### UPDATE ###
mx_reduced = mx_results %>% select(c(ID, title, abstract, date, doi, author_corresponding,
author_corresponding_institution))
mx_reduced$source = "medrxiv"
write.csv(mx_reduced, "mx_additional_dose_17Sep2021.csv")
# load packages
#library(formattable)
library(medrxivr)
library(dplyr)
# search medrxiv
term1 <- c("coronavirus","COVID-19","SARS-CoV-2") # OR
#term2 <- c("vaccine", "vaccines") # OR
term3 <- c("additional", "extra", "third", "three", "boost", "booster", "boosters", "boosting") # OR
term4 <- c("dose", "doses") # OR
query <- list(term1, term3, term4) # AND
mx_results <- mx_search(data = mx_snapshot(), auto_caps = TRUE, query = query, from_date = "2020-07-01") ### UPDATE ###
mx_reduced = mx_results %>% select(c(ID, title, abstract, date, doi, author_corresponding,
author_corresponding_institution))
mx_reduced$source = "medrxiv"
write.csv(mx_reduced, "mx_additional_dose_17Sep2021.csv")
# load packages
#library(formattable)
library(medrxivr)
library(dplyr)
# search medrxiv
term1 <- c("coronavirus","COVID-19","SARS-CoV-2") # OR
term2 <- c("vaccine", "vaccines", "dose", "doses") # OR
term3 <- c("additional", "extra", "third", "three", "boost", "booster", "boosters", "boosting") # OR
query <- list(term1, term2, term3) # AND
mx_results <- mx_search(data = mx_snapshot(), auto_caps = TRUE, query = query, from_date = "2020-07-01") ### UPDATE ###
mx_reduced = mx_results %>% select(c(ID, title, abstract, date, doi, author_corresponding,
author_corresponding_institution))
mx_reduced$source = "medrxiv"
write.csv(mx_reduced, "mx_additional_dose_17Sep2021.csv")
View(mx_results)
# search medrxiv
term1 <- c("coronavirus","COVID-19","SARS-CoV-2") # OR
term2 <- c("vaccine", "vaccines") # OR
term3 <- c("additional", "extra", "third", "three", "boost", "booster", "boosters", "boosting") # OR
term4 <- c("dose", "doses") # OR
query <- list(term1, term2, term3, term4) # AND
mx_results <- mx_search(data = mx_snapshot(), auto_caps = TRUE, query = query, from_date = "2020-07-01") ### UPDATE ###
mx_reduced = mx_results %>% select(c(ID, title, abstract, date, doi, author_corresponding,
author_corresponding_institution))
mx_reduced$source = "medrxiv"
write.csv(mx_reduced, "mx_additional_dose_17Sep2021.csv")
# load packages
library(easyPubMed)
library(dplyr)
library(formattable)
library(medrxivr)
# search medrxiv
if (!("mx_reduced.csv" %in% list.files())) {
term1 <- c("[Cc]oronavirus","COVID*","SARS*") # OR
term2 <- c("[Vv]accin*") # OR
term3 <- c("[Tt]rial", "[Pp]hase") # OR
query <- list(term1, term2, term3) # AND
mx_results <- mx_search(data = mx_snapshot(), query = query, from_date = "2020-01-01", to_date = "2021-10-13") ### UPDATE ###
mx_reduced = mx_results %>% select(c(ID, title, abstract, date, doi, author_corresponding,
author_corresponding_institution))
mx_reduced$source = "medrxiv"
write.csv(mx_reduced, "mx_reduced.csv")
} else { mx_reduced = read.csv("mx_reduced.csv", row.names=1) }
# search pubmed
if (!("pm_df.csv" %in% list.files())) {
query <- "(coronavirus OR COVID OR SARS*) AND vaccin* AND (trial OR phase) AND 2021/08/16:2021/10/13[crdt]"  ### UPDATE
pm_download <- batch_pubmed_download(pubmed_query_string = query, encoding = "ASCII")
pm_df <- table_articles_byAuth(pubmed_data = pm_download[[1]], included_authors = "first", encoding = "ASCII")
write.csv(pm_df, "pm_df.csv")
} else { pm_df1 = read.csv("pm_df.csv", row.names=1) }
pm_results <- data.frame(
ID = pm_df$pmid,
title = pm_df$title,
abstract = pm_df$abstract,
date = paste0(pm_df$year,"-",pm_df$month,"-",pm_df$day),
doi = pm_df$doi,
author_corresponding = paste(pm_df$firstname,pm_df$lastname),
author_corresponding_institution = pm_df$address,
source = "pubmed"
)
# load packages
library(easyPubMed)
library(dplyr)
library(formattable)
library(medrxivr)
# search medrxiv
if (!("mx_reduced.csv" %in% list.files())) {
term1 <- c("[Cc]oronavirus","COVID*","SARS*") # OR
term2 <- c("[Vv]accin*") # OR
term3 <- c("[Tt]rial", "[Pp]hase") # OR
query <- list(term1, term2, term3) # AND
mx_results <- mx_search(data = mx_snapshot(), query = query, from_date = "2020-01-01", to_date = "2021-10-13") ### UPDATE ###
mx_reduced = mx_results %>% select(c(ID, title, abstract, date, doi, author_corresponding,
author_corresponding_institution))
mx_reduced$source = "medrxiv"
write.csv(mx_reduced, "mx_reduced.csv")
} else { mx_reduced = read.csv("mx_reduced.csv", row.names=1) }
# search pubmed
if (!("pm_df.csv" %in% list.files())) {
query <- "(coronavirus OR COVID OR SARS*) AND vaccin* AND (trial OR phase) AND 2021/08/16:2021/10/13[crdt]"  ### UPDATE
pm_download <- batch_pubmed_download(pubmed_query_string = query, encoding = "ASCII")
pm_df <- table_articles_byAuth(pubmed_data = pm_download[[1]], included_authors = "first", encoding = "ASCII")
write.csv(pm_df, "pm_df.csv")
} else { pm_df1 = read.csv("pm_df.csv", row.names=1) }
pm_results <- data.frame(
ID = pm_df$pmid,
title = pm_df$title,
abstract = pm_df$abstract,
date = paste0(pm_df$year,"-",pm_df$month,"-",pm_df$day),
doi = pm_df$doi,
author_corresponding = paste(pm_df$firstname,pm_df$lastname),
author_corresponding_institution = pm_df$address,
source = "pubmed"
)
# collate results
collated = rbind(mx_reduced, pm_results)
write.csv(collated, "pre_abstract_screening_13Oct2021_full.csv")  ### UPDATE ###
#system("rm pubmed_*")
#system("rm mx_reduced*")
#system("rm easyPubMed_data_01.txt*")
### COVID-19 vaccine tracker
### Vaccine Centre, London School of Hygiene & Tropical Medicine
### Contact: Edward Parker, edward.parker@lshtm.ac.uk
### Implementation feature inputs
current_date = as.Date(Sys.Date()) #"2021-04-19"
### Figure --------------------------------------------------------------------
# load data
s = read.csv("input_data/VaC_LSHTM_landscape_summary.csv", stringsAsFactors = FALSE)
# set institute and platform factor levels
s$Institutes = factor(s$Institutes, levels = rev(s$Institutes))
s$Platform = factor(s$Platform, levels=c("RNA", "Vector (nr)", "Vector (r)", "Inactivated", "Live-attenuated", "Subunit", "VLP", "DNA", "Other"))
# convert input data into ggplot input dataframe (one row per record)
nvar = 7
nvac = nrow(s)
s1 = data.frame(
Institutes = rep(as.character(s$Institutes), nvar),
Platform = rep(s$Platform, nvar),
Stage = c(rep("I", nvac), rep("II", nvac), rep("III", nvac), rep("I", nvac), rep("II", nvac), rep("III", nvac), rep(" ", nvac)),
Group = c(rep("Registered trial", nvac*3), rep("Published", nvac*3), rep("In use", nvac)),
Status = c(s$PhaseI_trial, s$PhaseII_trial, s$PhaseIII_trial, s$PhaseI_pub, s$PhaseII_pub, s$PhaseIII_pub, s$In_use)
)
# set group, platform, and institute factor levels
s1$Group = factor(s1$Group, levels=c("Registered trial", "Published", "In use"))
s1$Platform = factor(s1$Platform, levels=levels(s$Platform))
s1$Institutes = factor(s1$Institutes, levels = rev(as.character(s$Institutes)))
# convert 1s in dataframe to words corresponding to platform (enabling colour-coding in plots)
s1$Status[s1$Status==0] = NA
s1$Status[s1$Status==1 & s1$Platform=="RNA"] = "RNA"
s1$Status[s1$Status==1 & s1$Platform=="DNA"] = "DNA"
s1$Status[s1$Status==1 & s1$Platform=="Vector (nr)"] = "Vector (nr)"
s1$Status[s1$Status==1 & s1$Platform=="Vector (r)"] = "Vector (r)"
s1$Status[s1$Status==1 & s1$Platform=="Inactivated"] = "Inactivated"
s1$Status[s1$Status==1 & s1$Platform=="Live-attenuated"] = "Live-attenuated"
s1$Status[s1$Status==1 & s1$Platform=="Subunit"] = "Subunit"
s1$Status[s1$Status==1 & s1$Platform=="VLP"] = "VLP"
s1$Status[s1$Status==1 & s1$Platform=="Other"] = "Other"
s1$Status = factor(s1$Status, levels=c("RNA", "Vector (nr)", "Vector (r)", "Inactivated", "Live-attenuated", "Subunit", "VLP", "DNA", "Other"))
# create heatmap of registered and published trials (plot panel 1)
g1 = ggplot(subset(s1, !is.na(Status)), aes(Stage, Institutes, fill=factor(Status))) + theme_bw() +
geom_tile(alpha = 0.9, colour="#f7f7f7", size=1) +
facet_grid(Platform~Group, scales = "free", space='free') +
labs(fill = "Platform") + ylab("") + xlab("") +
scale_x_discrete(position = "top") +
scale_fill_manual(values = c("RNA" = pal_1[2], "DNA" = pal_2[2], "Vector (nr)" = pal_3[2], "Vector (r)" = pal_4[2],
"Inactivated" = pal_5[2], "Live-attenuated" = pal_6[2], "Subunit" = pal_7[2], "VLP" = pal_8[2], "Other" = pal_9[2])) +
theme(panel.background = element_rect(fill = "#f7f7f7",colour = "#f7f7f7", linetype = "blank"),
panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.border = element_blank(),
text = element_text(size = 15), strip.background = element_blank(), strip.text.y = element_blank(),
strip.placement = "outside", legend.position = "bottom", legend.title = element_blank(),
legend.text = element_text(size = 14), axis.text = element_text(size=15), strip.text = element_text(size=15))
# create plot of manufacture projections (plot panel 2)
g2 = ggplot(s, aes(as.numeric(Manufacture), Institutes, fill = Platform)) +
geom_bar(stat = "identity") + theme_bw() +
scale_fill_manual(values = c("RNA" = pal_1[2], "DNA" = pal_2[2], "Vector (nr)" = pal_3[2], "Vector (r)" = pal_4[2],
"Inactivated" = pal_5[2], "Live-attenuated" = pal_6[2], "Subunit" = pal_7[2], "VLP" = pal_8[2], "Other" = pal_9[2])) +
facet_grid(Platform~., scales = "free", space='free') +
ylab("") + xlab("") + ggtitle("N doses\nproduced per year\n") +
scale_x_log10(limits=c(10^6,10^10), labels = trans_format("log10", math_format(10^.x)), oob = rescale_none) +
theme(legend.position = "none", text = element_text(size = 15), axis.text.y = element_blank(), title = element_text(size = 12),
axis.text = element_text(size=15),
strip.background = element_blank(), strip.text.y = element_blank(), strip.placement = "outside",
panel.border = element_blank(), panel.grid.major.y = element_blank(), panel.grid.minor = element_blank(),
panel.grid.major.x = element_line(size = 0.5, linetype = 'solid', colour = "white"),
panel.background = element_rect(fill = "#f7f7f7",colour = "#f7f7f7", linetype = "blank"))
# import Our Wolrd in Data country reporting statistics
#owid = read.csv("input_data/owid_26Jan21.csv", stringsAsFactors = FALSE)
owid <- as.data.frame(data.table::fread("https://raw.githubusercontent.com/owid/covid-19-data/master/public/data/vaccinations/locations.csv"))
owid = subset(owid, iso_code!="")
unique(owid$vaccines)
s$Institutes
### Figure --------------------------------------------------------------------
# load data
s = read.csv("input_data/VaC_LSHTM_landscape_summary.csv", stringsAsFactors = FALSE)
# set institute and platform factor levels
s$Institutes = factor(s$Institutes, levels = rev(s$Institutes))
s$Platform = factor(s$Platform, levels=c("RNA", "Vector (nr)", "Vector (r)", "Inactivated", "Live-attenuated", "Subunit", "VLP", "DNA", "Other"))
# convert input data into ggplot input dataframe (one row per record)
nvar = 7
nvac = nrow(s)
s1 = data.frame(
Institutes = rep(as.character(s$Institutes), nvar),
Platform = rep(s$Platform, nvar),
Stage = c(rep("I", nvac), rep("II", nvac), rep("III", nvac), rep("I", nvac), rep("II", nvac), rep("III", nvac), rep(" ", nvac)),
Group = c(rep("Registered trial", nvac*3), rep("Published", nvac*3), rep("In use", nvac)),
Status = c(s$PhaseI_trial, s$PhaseII_trial, s$PhaseIII_trial, s$PhaseI_pub, s$PhaseII_pub, s$PhaseIII_pub, s$In_use)
)
# set group, platform, and institute factor levels
s1$Group = factor(s1$Group, levels=c("Registered trial", "Published", "In use"))
s1$Platform = factor(s1$Platform, levels=levels(s$Platform))
s1$Institutes = factor(s1$Institutes, levels = rev(as.character(s$Institutes)))
# convert 1s in dataframe to words corresponding to platform (enabling colour-coding in plots)
s1$Status[s1$Status==0] = NA
s1$Status[s1$Status==1 & s1$Platform=="RNA"] = "RNA"
s1$Status[s1$Status==1 & s1$Platform=="DNA"] = "DNA"
s1$Status[s1$Status==1 & s1$Platform=="Vector (nr)"] = "Vector (nr)"
s1$Status[s1$Status==1 & s1$Platform=="Vector (r)"] = "Vector (r)"
s1$Status[s1$Status==1 & s1$Platform=="Inactivated"] = "Inactivated"
s1$Status[s1$Status==1 & s1$Platform=="Live-attenuated"] = "Live-attenuated"
s1$Status[s1$Status==1 & s1$Platform=="Subunit"] = "Subunit"
s1$Status[s1$Status==1 & s1$Platform=="VLP"] = "VLP"
s1$Status[s1$Status==1 & s1$Platform=="Other"] = "Other"
s1$Status = factor(s1$Status, levels=c("RNA", "Vector (nr)", "Vector (r)", "Inactivated", "Live-attenuated", "Subunit", "VLP", "DNA", "Other"))
# create heatmap of registered and published trials (plot panel 1)
g1 = ggplot(subset(s1, !is.na(Status)), aes(Stage, Institutes, fill=factor(Status))) + theme_bw() +
geom_tile(alpha = 0.9, colour="#f7f7f7", size=1) +
facet_grid(Platform~Group, scales = "free", space='free') +
labs(fill = "Platform") + ylab("") + xlab("") +
scale_x_discrete(position = "top") +
scale_fill_manual(values = c("RNA" = pal_1[2], "DNA" = pal_2[2], "Vector (nr)" = pal_3[2], "Vector (r)" = pal_4[2],
"Inactivated" = pal_5[2], "Live-attenuated" = pal_6[2], "Subunit" = pal_7[2], "VLP" = pal_8[2], "Other" = pal_9[2])) +
theme(panel.background = element_rect(fill = "#f7f7f7",colour = "#f7f7f7", linetype = "blank"),
panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.border = element_blank(),
text = element_text(size = 15), strip.background = element_blank(), strip.text.y = element_blank(),
strip.placement = "outside", legend.position = "bottom", legend.title = element_blank(),
legend.text = element_text(size = 14), axis.text = element_text(size=15), strip.text = element_text(size=15))
# create plot of manufacture projections (plot panel 2)
g2 = ggplot(s, aes(as.numeric(Manufacture), Institutes, fill = Platform)) +
geom_bar(stat = "identity") + theme_bw() +
scale_fill_manual(values = c("RNA" = pal_1[2], "DNA" = pal_2[2], "Vector (nr)" = pal_3[2], "Vector (r)" = pal_4[2],
"Inactivated" = pal_5[2], "Live-attenuated" = pal_6[2], "Subunit" = pal_7[2], "VLP" = pal_8[2], "Other" = pal_9[2])) +
facet_grid(Platform~., scales = "free", space='free') +
ylab("") + xlab("") + ggtitle("N doses\nproduced per year\n") +
scale_x_log10(limits=c(10^6,10^10), labels = trans_format("log10", math_format(10^.x)), oob = rescale_none) +
theme(legend.position = "none", text = element_text(size = 15), axis.text.y = element_blank(), title = element_text(size = 12),
axis.text = element_text(size=15),
strip.background = element_blank(), strip.text.y = element_blank(), strip.placement = "outside",
panel.border = element_blank(), panel.grid.major.y = element_blank(), panel.grid.minor = element_blank(),
panel.grid.major.x = element_line(size = 0.5, linetype = 'solid', colour = "white"),
panel.background = element_rect(fill = "#f7f7f7",colour = "#f7f7f7", linetype = "blank"))
# import Our Wolrd in Data country reporting statistics
#owid = read.csv("input_data/owid_26Jan21.csv", stringsAsFactors = FALSE)
owid <- as.data.frame(data.table::fread("https://raw.githubusercontent.com/owid/covid-19-data/master/public/data/vaccinations/locations.csv"))
owid = subset(owid, iso_code!="")
# load packages
library(easyPubMed)
library(dplyr)
library(formattable)
library(medrxivr)
# search medrxiv
if (!("mx_reduced.csv" %in% list.files())) {
term1 <- c("[Cc]oronavirus","COVID*","SARS*") # OR
term2 <- c("[Vv]accin*") # OR
term3 <- c("[Tt]rial", "[Pp]hase") # OR
query <- list(term1, term2, term3) # AND
mx_results <- mx_search(data = mx_snapshot(), query = query, from_date = "2020-01-01", to_date = "2021-11-05") ### UPDATE ###
mx_reduced = mx_results %>% select(c(ID, title, abstract, date, doi, author_corresponding,
author_corresponding_institution))
mx_reduced$source = "medrxiv"
write.csv(mx_reduced, "mx_reduced.csv")
} else { mx_reduced = read.csv("mx_reduced.csv", row.names=1) }
# search pubmed
if (!("pm_df.csv" %in% list.files())) {
query <- "(coronavirus OR COVID OR SARS*) AND vaccin* AND (trial OR phase) AND 2021/09/15:2021/11/05[crdt]"  ### UPDATE
pm_download <- batch_pubmed_download(pubmed_query_string = query, encoding = "ASCII")
pm_df <- table_articles_byAuth(pubmed_data = pm_download[[1]], included_authors = "first", encoding = "ASCII")
write.csv(pm_df, "pm_df.csv")
} else { pm_df1 = read.csv("pm_df.csv", row.names=1) }
pm_results <- data.frame(
ID = pm_df$pmid,
title = pm_df$title,
abstract = pm_df$abstract,
date = paste0(pm_df$year,"-",pm_df$month,"-",pm_df$day),
doi = pm_df$doi,
author_corresponding = paste(pm_df$firstname,pm_df$lastname),
author_corresponding_institution = pm_df$address,
source = "pubmed"
)
# collate results
collated = rbind(mx_reduced, pm_results)
write.csv(collated, "pre_abstract_screening_05Nov2021_full.csv")  ### UPDATE ###
#system("rm pubmed_*")
#system("rm mx_reduced*")
#system("rm easyPubMed_data_01.txt*")
# load packages
library(easyPubMed)
library(dplyr)
library(formattable)
library(medrxivr)
# search medrxiv
if (!("mx_reduced.csv" %in% list.files())) {
term1 <- c("[Cc]oronavirus","COVID*","SARS*") # OR
term2 <- c("[Vv]accin*") # OR
term3 <- c("[Tt]rial", "[Pp]hase") # OR
query <- list(term1, term2, term3) # AND
mx_results <- mx_search(data = mx_snapshot(), query = query, from_date = "2020-01-01", to_date = "2021-12-14") ### UPDATE ###
mx_reduced = mx_results %>% select(c(ID, title, abstract, date, doi, author_corresponding,
author_corresponding_institution))
mx_reduced$source = "medrxiv"
write.csv(mx_reduced, "mx_reduced.csv")
} else { mx_reduced = read.csv("mx_reduced.csv", row.names=1) }
# search pubmed
if (!("pm_df.csv" %in% list.files())) {
query <- "(coronavirus OR COVID OR SARS*) AND vaccin* AND (trial OR phase) AND 2021/11/01:2021/12/14[crdt]"  ### UPDATE
pm_download <- batch_pubmed_download(pubmed_query_string = query, encoding = "ASCII")
pm_df <- table_articles_byAuth(pubmed_data = pm_download[[1]], included_authors = "first", encoding = "ASCII")
write.csv(pm_df, "pm_df.csv")
} else { pm_df1 = read.csv("pm_df.csv", row.names=1) }
pm_results <- data.frame(
ID = pm_df$pmid,
title = pm_df$title,
abstract = pm_df$abstract,
date = paste0(pm_df$year,"-",pm_df$month,"-",pm_df$day),
doi = pm_df$doi,
author_corresponding = paste(pm_df$firstname,pm_df$lastname),
author_corresponding_institution = pm_df$address,
source = "pubmed"
)
# search pubmed
if (!("pm_df.csv" %in% list.files())) {
query <- "(coronavirus OR COVID OR SARS*) AND vaccin* AND (trial OR phase) AND 2021/11/01:2021/12/14[crdt]"  ### UPDATE
pm_download <- batch_pubmed_download(pubmed_query_string = query, encoding = "ASCII")
pm_df <- table_articles_byAuth(pubmed_data = pm_download[[1]], included_authors = "first", encoding = "ASCII")
write.csv(pm_df, "pm_df.csv")
} else { pm_df1 = read.csv("pm_df.csv", row.names=1) }
query <- "(coronavirus OR COVID OR SARS*) AND vaccin* AND (trial OR phase) AND 2021/11/01:2021/12/15[crdt]"  ### UPDATE
pm_download <- batch_pubmed_download(pubmed_query_string = query, encoding = "ASCII")
pm_download <- batch_pubmed_download(pubmed_query_string = query, encoding = "ASCII")
pm_df <- table_articles_byAuth(pubmed_data = pm_download[[1]], included_authors = "first", encoding = "ASCII")
# load packages
library(easyPubMed)
library(dplyr)
library(formattable)
library(medrxivr)
# search medrxiv
if (!("mx_reduced.csv" %in% list.files())) {
term1 <- c("[Cc]oronavirus","COVID*","SARS*") # OR
term2 <- c("[Vv]accin*") # OR
term3 <- c("[Tt]rial", "[Pp]hase") # OR
query <- list(term1, term2, term3) # AND
mx_results <- mx_search(data = mx_snapshot(), query = query, from_date = "2020-01-01", to_date = "2021-12-14") ### UPDATE ###
mx_reduced = mx_results %>% select(c(ID, title, abstract, date, doi, author_corresponding,
author_corresponding_institution))
mx_reduced$source = "medrxiv"
write.csv(mx_reduced, "mx_reduced.csv")
} else { mx_reduced = read.csv("mx_reduced.csv", row.names=1) }
# search pubmed
if (!("pm_df.csv" %in% list.files())) {
query <- "(coronavirus OR COVID OR SARS*) AND vaccin* AND (trial OR phase) AND 2021/11/01:2021/12/14[crdt]"  ### UPDATE
pm_download <- batch_pubmed_download(pubmed_query_string = query, encoding = "ASCII")
pm_df <- table_articles_byAuth(pubmed_data = pm_download[[1]], included_authors = "first", encoding = "ASCII")
write.csv(pm_df, "pm_df.csv")
} else { pm_df1 = read.csv("pm_df.csv", row.names=1) }
pm_results <- data.frame(
ID = pm_df$pmid,
title = pm_df$title,
abstract = pm_df$abstract,
date = paste0(pm_df$year,"-",pm_df$month,"-",pm_df$day),
doi = pm_df$doi,
author_corresponding = paste(pm_df$firstname,pm_df$lastname),
author_corresponding_institution = pm_df$address,
source = "pubmed"
)
# collate results
collated = rbind(mx_reduced, pm_results)
write.csv(collated, "pre_abstract_screening_14Dec2021_full.csv")  ### UPDATE ###
sum(collated$source=="pubmed")
sum(collated$source=="medrxiv")
sum(collated$source=="pubmed")
sum(collated$source=="medrxiv")
# load packages
library(easyPubMed)
library(dplyr)
library(dplyr)
library(formattable)
library(medrxivr)
# search medrxiv
if (!("mx_reduced.csv" %in% list.files())) {
term1 <- c("[Cc]oronavirus","COVID*","SARS*") # OR
term2 <- c("[Vv]accin*") # OR
term3 <- c("[Tt]rial", "[Pp]hase") # OR
query <- list(term1, term2, term3) # AND
mx_results <- mx_search(data = mx_snapshot(), query = query, from_date = "2020-01-01", to_date = "2022-01-06") ### UPDATE ###
mx_reduced = mx_results %>% select(c(ID, title, abstract, date, doi, author_corresponding,
author_corresponding_institution))
mx_reduced$source = "medrxiv"
write.csv(mx_reduced, "mx_reduced.csv")
} else { mx_reduced = read.csv("mx_reduced.csv", row.names=1) }
# search pubmed
if (!("pm_df.csv" %in% list.files())) {
query <- "(coronavirus OR COVID OR SARS*) AND vaccin* AND (trial OR phase) AND 2021/11/01:2022/01/06[crdt]"  ### UPDATE
pm_download <- batch_pubmed_download(pubmed_query_string = query, encoding = "ASCII")
pm_df <- table_articles_byAuth(pubmed_data = pm_download[[1]], included_authors = "first", encoding = "ASCII")
write.csv(pm_df, "pm_df.csv")
} else { pm_df1 = read.csv("pm_df.csv", row.names=1) }
pm_results <- data.frame(
ID = pm_df$pmid,
title = pm_df$title,
abstract = pm_df$abstract,
date = paste0(pm_df$year,"-",pm_df$month,"-",pm_df$day),
doi = pm_df$doi,
author_corresponding = paste(pm_df$firstname,pm_df$lastname),
author_corresponding_institution = pm_df$address,
source = "pubmed"
)
# collate results
collated = rbind(mx_reduced, pm_results)
write.csv(collated, "pre_abstract_screening_06Jan2022_full.csv")  ### UPDATE ###
