write.csv(mx_reduced, "mx_reduced.csv")
} else { mx_reduced = read.csv("mx_reduced.csv", row.names=1) }
# search pubmed
if (!("pubmed_1.csv" %in% list.files())) {
query <- "(coronavirus OR COVID OR SARS*) AND vaccin* AND (trial OR phase) AND 2020/01/01:2020/06/01[crdt]"
pm_download <- batch_pubmed_download(pubmed_query_string = query, encoding = "ASCII")
pm_df1 <- table_articles_byAuth(pubmed_data = pm_download[[1]], included_authors = "first", encoding = "ASCII")
write.csv(pm_df1, "pubmed_1.csv")
} else { pm_df1 = read.csv("pubmed_1.csv", row.names=1) }
# search part 2
if (!("pubmed_2.csv" %in% list.files())) {
query <- "(coronavirus OR COVID OR SARS*) AND vaccin* AND (trial OR phase) AND 2020/06/02:2020/08/01[crdt]"
pm_download <- batch_pubmed_download(pubmed_query_string = query, encoding = "ASCII")
pm_df2 <- table_articles_byAuth(pubmed_data = pm_download[[1]], included_authors = "first", encoding = "ASCII")
write.csv(pm_df2, "pubmed_2.csv")
} else { pm_df2 = read.csv("pubmed_2.csv", row.names=1) }
# load packages
library(easyPubMed)
library(dplyr)
library(formattable)
library(medrxivr)
# search medrxiv
if (!("mx_reduced.csv" %in% list.files())) {
term1 <- c("[Cc]oronavirus","COVID*","SARS*") # OR
term2 <- c("[Vv]accin*") # OR
term3 <- c("[Tt]rial", "[Pp]hase") # OR
query <- list(term1, term2, term3) # AND
mx_results <- mx_search(data = mx_snapshot(), query = query, from_date = "2020-01-01", to_date = "2021-02-08") ### UPDATE ###
mx_reduced = mx_results %>% select(c(ID, title, abstract, date, doi, author_corresponding,
author_corresponding_institution))
mx_reduced$source = "medrxiv"
write.csv(mx_reduced, "mx_reduced.csv")
} else { mx_reduced = read.csv("mx_reduced.csv", row.names=1) }
# search pubmed
if (!("pubmed_1.csv" %in% list.files())) {
query <- "(coronavirus OR COVID OR SARS*) AND vaccin* AND (trial OR phase) AND 2020/01/01:2020/06/01[crdt]"
pm_download <- batch_pubmed_download(pubmed_query_string = query, encoding = "ASCII")
pm_df1 <- table_articles_byAuth(pubmed_data = pm_download[[1]], included_authors = "first", encoding = "ASCII")
write.csv(pm_df1, "pubmed_1.csv")
} else { pm_df1 = read.csv("pubmed_1.csv", row.names=1) }
# search part 2
if (!("pubmed_2.csv" %in% list.files())) {
query <- "(coronavirus OR COVID OR SARS*) AND vaccin* AND (trial OR phase) AND 2020/06/02:2020/08/01[crdt]"
pm_download <- batch_pubmed_download(pubmed_query_string = query, encoding = "ASCII")
pm_df2 <- table_articles_byAuth(pubmed_data = pm_download[[1]], included_authors = "first", encoding = "ASCII")
write.csv(pm_df2, "pubmed_2.csv")
} else { pm_df2 = read.csv("pubmed_2.csv", row.names=1) }
# search part 3
if (!("pubmed_3.csv" %in% list.files())) {
query <- "(coronavirus OR COVID OR SARS*) AND vaccin* AND (trial OR phase) AND 2020/08/02:2020/11/01[crdt]"
pm_download <- batch_pubmed_download(pubmed_query_string = query, encoding = "ASCII")
pm_df3 <- table_articles_byAuth(pubmed_data = pm_download[[1]], included_authors = "first", encoding = "ASCII")
write.csv(pm_df3, "pubmed_3.csv")
} else { pm_df3 = read.csv("pubmed_3.csv", row.names=1) }
# search part 4
if (!("pubmed_4.csv" %in% list.files())) {
query <- "(coronavirus OR COVID OR SARS*) AND vaccin* AND (trial OR phase) AND 2020/11/02:2021/02/08[crdt]" ### UPDATE ###
pm_download <- batch_pubmed_download(pubmed_query_string = query, encoding = "ASCII")
pm_df4 <- table_articles_byAuth(pubmed_data = pm_download[[1]], included_authors = "first", encoding = "ASCII")
write.csv(pm_df4, "pubmed_4.csv")
} else { pm_df4 = read.csv("pubmed_4.csv", row.names=1) }
# merge results
pm_df = rbind(pm_df1, pm_df2, pm_df3, pm_df4)
pm_results <- data.frame(
ID = pm_df$pmid,
title = pm_df$title,
abstract = pm_df$abstract,
date = paste0(pm_df$year,"-",pm_df$month,"-",pm_df$day),
doi = pm_df$doi,
author_corresponding = paste(pm_df$firstname,pm_df$lastname),
author_corresponding_institution = pm_df$address,
source = "pubmed"
)
# collate results
collated = rbind(mx_reduced, pm_results)
write.csv(collated, "pre_abstract_screening_08Feb2021_full.csv")  ### UPDATE ###
#system("rm pubmed_*")
#system("rm mx_reduced*")
#system("rm easyPubMed_data_01.txt*")
sum(collated$source=="pubmed")
sum(collated$source=="medrxiv")
sum(collated$source=="pubmed")
sum(collated$source=="medrxiv")
sum(collated$source=="pubmed")
sum(collated$source=="medrxiv")
# load packages
library(easyPubMed)
library(dplyr)
library(formattable)
library(medrxivr)
# search medrxiv
if (!("mx_reduced.csv" %in% list.files())) {
term1 <- c("[Cc]oronavirus","COVID*","SARS*") # OR
term2 <- c("[Vv]accin*") # OR
term3 <- c("[Tt]rial", "[Pp]hase") # OR
query <- list(term1, term2, term3) # AND
mx_results <- mx_search(data = mx_snapshot(), query = query, from_date = "2020-01-01", to_date = "2021-02-15") ### UPDATE ###
mx_reduced = mx_results %>% select(c(ID, title, abstract, date, doi, author_corresponding,
author_corresponding_institution))
mx_reduced$source = "medrxiv"
write.csv(mx_reduced, "mx_reduced.csv")
} else { mx_reduced = read.csv("mx_reduced.csv", row.names=1) }
# search pubmed
if (!("pubmed_1.csv" %in% list.files())) {
query <- "(coronavirus OR COVID OR SARS*) AND vaccin* AND (trial OR phase) AND 2020/01/01:2020/06/01[crdt]"
pm_download <- batch_pubmed_download(pubmed_query_string = query, encoding = "ASCII")
pm_df1 <- table_articles_byAuth(pubmed_data = pm_download[[1]], included_authors = "first", encoding = "ASCII")
write.csv(pm_df1, "pubmed_1.csv")
} else { pm_df1 = read.csv("pubmed_1.csv", row.names=1) }
# search part 2
if (!("pubmed_2.csv" %in% list.files())) {
query <- "(coronavirus OR COVID OR SARS*) AND vaccin* AND (trial OR phase) AND 2020/06/02:2020/08/01[crdt]"
pm_download <- batch_pubmed_download(pubmed_query_string = query, encoding = "ASCII")
pm_df2 <- table_articles_byAuth(pubmed_data = pm_download[[1]], included_authors = "first", encoding = "ASCII")
write.csv(pm_df2, "pubmed_2.csv")
} else { pm_df2 = read.csv("pubmed_2.csv", row.names=1) }
# search part 3
if (!("pubmed_3.csv" %in% list.files())) {
query <- "(coronavirus OR COVID OR SARS*) AND vaccin* AND (trial OR phase) AND 2020/08/02:2020/11/01[crdt]"
pm_download <- batch_pubmed_download(pubmed_query_string = query, encoding = "ASCII")
pm_df3 <- table_articles_byAuth(pubmed_data = pm_download[[1]], included_authors = "first", encoding = "ASCII")
write.csv(pm_df3, "pubmed_3.csv")
} else { pm_df3 = read.csv("pubmed_3.csv", row.names=1) }
# search part 4
if (!("pubmed_4.csv" %in% list.files())) {
query <- "(coronavirus OR COVID OR SARS*) AND vaccin* AND (trial OR phase) AND 2020/11/02:2021/02/15[crdt]" ### UPDATE ###
pm_download <- batch_pubmed_download(pubmed_query_string = query, encoding = "ASCII")
pm_df4 <- table_articles_byAuth(pubmed_data = pm_download[[1]], included_authors = "first", encoding = "ASCII")
write.csv(pm_df4, "pubmed_4.csv")
} else { pm_df4 = read.csv("pubmed_4.csv", row.names=1) }
# merge results
pm_df = rbind(pm_df1, pm_df2, pm_df3, pm_df4)
pm_results <- data.frame(
ID = pm_df$pmid,
title = pm_df$title,
abstract = pm_df$abstract,
date = paste0(pm_df$year,"-",pm_df$month,"-",pm_df$day),
doi = pm_df$doi,
author_corresponding = paste(pm_df$firstname,pm_df$lastname),
author_corresponding_institution = pm_df$address,
source = "pubmed"
)
# collate results
collated = rbind(mx_reduced, pm_results)
write.csv(collated, "pre_abstract_screening_15Feb2021_full.csv")  ### UPDATE ###
#system("rm pubmed_*")
#system("rm mx_reduced*")
#system("rm easyPubMed_data_01.txt*")
sum(collated$source=="pubmed")
sum(collated$source=="medrxiv")
sum(collated$source=="pubmed")
sum(collated$source=="medrxiv")
### COVID-19 vaccine tracker
### Vaccine Centre, London School of Hygiene & Tropical Medicine
### Contact: Edward Parker, edward.parker@lshtm.ac.uk
### Shiny app code
### LOAD PACKAGES ---------------------------------------------------------------------------------
if(!require(data.table)) install.packages("data.table", repos = "http://cran.us.r-project.org")
if(!require(DT)) install.packages("DT", repos = "http://cran.us.r-project.org")
if(!require(dplyr)) install.packages("dplyr", repos = "http://cran.us.r-project.org")
if(!require(ggplot2)) install.packages("ggplot2", repos = "http://cran.us.r-project.org")
if(!require(plotly)) install.packages("plotly", repos = "http://cran.us.r-project.org")
if(!require(shiny)) install.packages("shiny", repos = "http://cran.us.r-project.org")
if(!require(shinythemes)) install.packages("shinythemes", repos = "http://cran.us.r-project.org")
if(!require(stringr)) install.packages("stringr", repos = "http://cran.us.r-project.org")
if(!require(stringi)) install.packages("stringi", repos = "http://cran.us.r-project.org")
if(!require(timevis)) install.packages("timevis", repos = "http://cran.us.r-project.org")
if(!require(RColorBrewer)) install.packages("RColorBrewer", repos = "http://cran.us.r-project.org")
if(!require(shinydashboard)) install.packages("shinydashboard", repos = "http://cran.us.r-project.org")
if(!require(writexl)) install.packages("writexl", repos = "http://cran.us.r-project.org")
if(!require(tidyverse)) install.packages("tidyverse", repos = "http://cran.us.r-project.org")
if(!require(readxl)) install.packages("readxl", repos = "http://cran.us.r-project.org")
if(!require(shinyWidgets)) install.packages("shinyWidgets", repos = "http://cran.us.r-project.org")
if(!require(cowplot)) install.packages("cowplot", repos = "http://cran.us.r-project.org")
if(!require(BiocManager)) install.packages("BiocManager", repos = "http://cran.us.r-project.org")
if(!require(leaflet)) install.packages("leaflet", repos = "http://cran.us.r-project.org")
if(!require(geojsonio)) install.packages("geojsonio", repos = "http://cran.us.r-project.org")
options(repos = BiocManager::repositories())
if(!require(ComplexHeatmap)) install.packages("ComplexHeatmap", repos = "https://bioconductor.org")
if(!require(scales)) install.packages("scales", repos = "https://bioconductor.org")
### Generate landscape inputs for each layer -------------------------------------------------------------------------------------
update_full = "15 February 2021"
update_equity = "15 February 2021"
source("input_code/VaC_landscape.R")
source("input_code/VaC_efficacy_map.R")
source("input_code/VaC_living_review.R")
source("input_code/VaC_implementation.R")
# additional code to update case counts for weekly updates
#source("input_code/VaC_jhu_daily_cases.R")
# update manual components for ui
table(landscape$Phase)
table(landscape$Platform)
table(landscape$In.use)
# load packages
library(easyPubMed)
library(dplyr)
library(formattable)
library(medrxivr)
# search medrxiv
if (!("mx_reduced.csv" %in% list.files())) {
term1 <- c("[Cc]oronavirus","COVID*","SARS*") # OR
term2 <- c("[Vv]accin*") # OR
term3 <- c("[Tt]rial", "[Pp]hase") # OR
query <- list(term1, term2, term3) # AND
mx_results <- mx_search(data = mx_snapshot(), query = query, from_date = "2020-01-01", to_date = "2021-02-22") ### UPDATE ###
mx_reduced = mx_results %>% select(c(ID, title, abstract, date, doi, author_corresponding,
author_corresponding_institution))
mx_reduced$source = "medrxiv"
write.csv(mx_reduced, "mx_reduced.csv")
} else { mx_reduced = read.csv("mx_reduced.csv", row.names=1) }
# search pubmed
if (!("pubmed_1.csv" %in% list.files())) {
query <- "(coronavirus OR COVID OR SARS*) AND vaccin* AND (trial OR phase) AND 2020/01/01:2020/06/01[crdt]"
pm_download <- batch_pubmed_download(pubmed_query_string = query, encoding = "ASCII")
pm_df1 <- table_articles_byAuth(pubmed_data = pm_download[[1]], included_authors = "first", encoding = "ASCII")
write.csv(pm_df1, "pubmed_1.csv")
} else { pm_df1 = read.csv("pubmed_1.csv", row.names=1) }
# search part 2
if (!("pubmed_2.csv" %in% list.files())) {
query <- "(coronavirus OR COVID OR SARS*) AND vaccin* AND (trial OR phase) AND 2020/06/02:2020/08/01[crdt]"
pm_download <- batch_pubmed_download(pubmed_query_string = query, encoding = "ASCII")
pm_df2 <- table_articles_byAuth(pubmed_data = pm_download[[1]], included_authors = "first", encoding = "ASCII")
write.csv(pm_df2, "pubmed_2.csv")
} else { pm_df2 = read.csv("pubmed_2.csv", row.names=1) }
# search part 3
if (!("pubmed_3.csv" %in% list.files())) {
query <- "(coronavirus OR COVID OR SARS*) AND vaccin* AND (trial OR phase) AND 2020/08/02:2020/11/01[crdt]"
pm_download <- batch_pubmed_download(pubmed_query_string = query, encoding = "ASCII")
pm_df3 <- table_articles_byAuth(pubmed_data = pm_download[[1]], included_authors = "first", encoding = "ASCII")
write.csv(pm_df3, "pubmed_3.csv")
} else { pm_df3 = read.csv("pubmed_3.csv", row.names=1) }
# search part 4
if (!("pubmed_4.csv" %in% list.files())) {
query <- "(coronavirus OR COVID OR SARS*) AND vaccin* AND (trial OR phase) AND 2020/11/02:2021/02/22[crdt]" ### UPDATE ###
pm_download <- batch_pubmed_download(pubmed_query_string = query, encoding = "ASCII")
pm_df4 <- table_articles_byAuth(pubmed_data = pm_download[[1]], included_authors = "first", encoding = "ASCII")
write.csv(pm_df4, "pubmed_4.csv")
} else { pm_df4 = read.csv("pubmed_4.csv", row.names=1) }
# merge results
pm_df = rbind(pm_df1, pm_df2, pm_df3, pm_df4)
pm_results <- data.frame(
ID = pm_df$pmid,
title = pm_df$title,
abstract = pm_df$abstract,
date = paste0(pm_df$year,"-",pm_df$month,"-",pm_df$day),
doi = pm_df$doi,
author_corresponding = paste(pm_df$firstname,pm_df$lastname),
author_corresponding_institution = pm_df$address,
source = "pubmed"
)
# collate results
collated = rbind(mx_reduced, pm_results)
write.csv(collated, "pre_abstract_screening_22Feb2021_full.csv")  ### UPDATE ###
#system("rm pubmed_*")
#system("rm mx_reduced*")
#system("rm easyPubMed_data_01.txt*")
sum(collated$source=="pubmed")
sum(collated$source=="medrxiv")
sum(collated$source=="pubmed")
sum(collated$source=="medrxiv")
# load packages
library(easyPubMed)
library(dplyr)
library(formattable)
library(medrxivr)
# search medrxiv
if (!("mx_reduced.csv" %in% list.files())) {
term1 <- c("[Cc]oronavirus","COVID*","SARS*") # OR
term2 <- c("[Vv]accin*") # OR
term3 <- c("[Tt]rial", "[Pp]hase") # OR
query <- list(term1, term2, term3) # AND
mx_results <- mx_search(data = mx_snapshot(), query = query, from_date = "2020-01-01", to_date = "2021-03-01") ### UPDATE ###
mx_reduced = mx_results %>% select(c(ID, title, abstract, date, doi, author_corresponding,
author_corresponding_institution))
mx_reduced$source = "medrxiv"
write.csv(mx_reduced, "mx_reduced.csv")
} else { mx_reduced = read.csv("mx_reduced.csv", row.names=1) }
# search pubmed
if (!("pubmed_1.csv" %in% list.files())) {
query <- "(coronavirus OR COVID OR SARS*) AND vaccin* AND (trial OR phase) AND 2020/01/01:2020/06/01[crdt]"
pm_download <- batch_pubmed_download(pubmed_query_string = query, encoding = "ASCII")
pm_df1 <- table_articles_byAuth(pubmed_data = pm_download[[1]], included_authors = "first", encoding = "ASCII")
write.csv(pm_df1, "pubmed_1.csv")
} else { pm_df1 = read.csv("pubmed_1.csv", row.names=1) }
# search part 2
if (!("pubmed_2.csv" %in% list.files())) {
query <- "(coronavirus OR COVID OR SARS*) AND vaccin* AND (trial OR phase) AND 2020/06/02:2020/08/01[crdt]"
pm_download <- batch_pubmed_download(pubmed_query_string = query, encoding = "ASCII")
pm_df2 <- table_articles_byAuth(pubmed_data = pm_download[[1]], included_authors = "first", encoding = "ASCII")
write.csv(pm_df2, "pubmed_2.csv")
} else { pm_df2 = read.csv("pubmed_2.csv", row.names=1) }
# search part 3
if (!("pubmed_3.csv" %in% list.files())) {
query <- "(coronavirus OR COVID OR SARS*) AND vaccin* AND (trial OR phase) AND 2020/08/02:2020/11/01[crdt]"
pm_download <- batch_pubmed_download(pubmed_query_string = query, encoding = "ASCII")
pm_df3 <- table_articles_byAuth(pubmed_data = pm_download[[1]], included_authors = "first", encoding = "ASCII")
write.csv(pm_df3, "pubmed_3.csv")
} else { pm_df3 = read.csv("pubmed_3.csv", row.names=1) }
# search part 4
if (!("pubmed_4.csv" %in% list.files())) {
query <- "(coronavirus OR COVID OR SARS*) AND vaccin* AND (trial OR phase) AND 2020/11/02:2021/03/01[crdt]" ### UPDATE ###
pm_download <- batch_pubmed_download(pubmed_query_string = query, encoding = "ASCII")
pm_df4 <- table_articles_byAuth(pubmed_data = pm_download[[1]], included_authors = "first", encoding = "ASCII")
write.csv(pm_df4, "pubmed_4.csv")
} else { pm_df4 = read.csv("pubmed_4.csv", row.names=1) }
# merge results
pm_df = rbind(pm_df1, pm_df2, pm_df3, pm_df4)
pm_results <- data.frame(
ID = pm_df$pmid,
title = pm_df$title,
abstract = pm_df$abstract,
date = paste0(pm_df$year,"-",pm_df$month,"-",pm_df$day),
doi = pm_df$doi,
author_corresponding = paste(pm_df$firstname,pm_df$lastname),
author_corresponding_institution = pm_df$address,
source = "pubmed"
)
# collate results
collated = rbind(mx_reduced, pm_results)
write.csv(collated, "pre_abstract_screening_01Mar2021_full.csv")  ### UPDATE ###
#system("rm pubmed_*")
#system("rm mx_reduced*")
#system("rm easyPubMed_data_01.txt*")
sum(collated$source=="pubmed")
sum(collated$source=="medrxiv")
sum(collated$source=="pubmed")
sum(collated$source=="medrxiv")
# variable to define whether to run analyses in full (TRUE) or not (FALSE)
run_rf_full = TRUE # set as TRUE to run Random Forests in full
run_nb_full = TRUE # set as TRUE to run negative binomial models in full
iter = 20 # number of cross-validation iterations to run
# create output folders
if ("output_module4" %in% list.files()==FALSE) {
system("mkdir output_module4")
system("mkdir output_module4/RF_output_stats")
system("mkdir output_module4/RF_output_importance")
}
# load packages and functions
source("input/packages_and_functions.R")
# load packages
library(easyPubMed)
library(dplyr)
library(formattable)
library(medrxivr)
# search medrxiv
if (!("mx_reduced.csv" %in% list.files())) {
term1 <- c("[Cc]oronavirus","COVID*","SARS*") # OR
term2 <- c("[Vv]accin*") # OR
term3 <- c("[Tt]rial", "[Pp]hase") # OR
query <- list(term1, term2, term3) # AND
mx_results <- mx_search(data = mx_snapshot(), query = query, from_date = "2020-01-01", to_date = "2021-03-08") ### UPDATE ###
mx_reduced = mx_results %>% select(c(ID, title, abstract, date, doi, author_corresponding,
author_corresponding_institution))
mx_reduced$source = "medrxiv"
write.csv(mx_reduced, "mx_reduced.csv")
} else { mx_reduced = read.csv("mx_reduced.csv", row.names=1) }
# search pubmed
if (!("pubmed_1.csv" %in% list.files())) {
query <- "(coronavirus OR COVID OR SARS*) AND vaccin* AND (trial OR phase) AND 2020/01/01:2020/06/01[crdt]"
pm_download <- batch_pubmed_download(pubmed_query_string = query, encoding = "ASCII")
pm_df1 <- table_articles_byAuth(pubmed_data = pm_download[[1]], included_authors = "first", encoding = "ASCII")
write.csv(pm_df1, "pubmed_1.csv")
} else { pm_df1 = read.csv("pubmed_1.csv", row.names=1) }
# search part 2
if (!("pubmed_2.csv" %in% list.files())) {
query <- "(coronavirus OR COVID OR SARS*) AND vaccin* AND (trial OR phase) AND 2020/06/02:2020/08/01[crdt]"
pm_download <- batch_pubmed_download(pubmed_query_string = query, encoding = "ASCII")
pm_df2 <- table_articles_byAuth(pubmed_data = pm_download[[1]], included_authors = "first", encoding = "ASCII")
write.csv(pm_df2, "pubmed_2.csv")
} else { pm_df2 = read.csv("pubmed_2.csv", row.names=1) }
# search part 3
if (!("pubmed_3.csv" %in% list.files())) {
query <- "(coronavirus OR COVID OR SARS*) AND vaccin* AND (trial OR phase) AND 2020/08/02:2020/11/01[crdt]"
pm_download <- batch_pubmed_download(pubmed_query_string = query, encoding = "ASCII")
pm_df3 <- table_articles_byAuth(pubmed_data = pm_download[[1]], included_authors = "first", encoding = "ASCII")
write.csv(pm_df3, "pubmed_3.csv")
} else { pm_df3 = read.csv("pubmed_3.csv", row.names=1) }
# search part 4
if (!("pubmed_4.csv" %in% list.files())) {
query <- "(coronavirus OR COVID OR SARS*) AND vaccin* AND (trial OR phase) AND 2020/11/02:2021/03/08[crdt]" ### UPDATE ###
pm_download <- batch_pubmed_download(pubmed_query_string = query, encoding = "ASCII")
pm_df4 <- table_articles_byAuth(pubmed_data = pm_download[[1]], included_authors = "first", encoding = "ASCII")
write.csv(pm_df4, "pubmed_4.csv")
} else { pm_df4 = read.csv("pubmed_4.csv", row.names=1) }
# load packages
library(easyPubMed)
library(dplyr)
library(formattable)
library(medrxivr)
# search medrxiv
if (!("mx_reduced.csv" %in% list.files())) {
term1 <- c("[Cc]oronavirus","COVID*","SARS*") # OR
term2 <- c("[Vv]accin*") # OR
term3 <- c("[Tt]rial", "[Pp]hase") # OR
query <- list(term1, term2, term3) # AND
mx_results <- mx_search(data = mx_snapshot(), query = query, from_date = "2020-01-01", to_date = "2021-03-08") ### UPDATE ###
mx_reduced = mx_results %>% select(c(ID, title, abstract, date, doi, author_corresponding,
author_corresponding_institution))
mx_reduced$source = "medrxiv"
write.csv(mx_reduced, "mx_reduced.csv")
} else { mx_reduced = read.csv("mx_reduced.csv", row.names=1) }
# search pubmed
if (!("pubmed_1.csv" %in% list.files())) {
query <- "(coronavirus OR COVID OR SARS*) AND vaccin* AND (trial OR phase) AND 2020/01/01:2020/06/01[crdt]"
pm_download <- batch_pubmed_download(pubmed_query_string = query, encoding = "ASCII")
pm_df1 <- table_articles_byAuth(pubmed_data = pm_download[[1]], included_authors = "first", encoding = "ASCII")
write.csv(pm_df1, "pubmed_1.csv")
} else { pm_df1 = read.csv("pubmed_1.csv", row.names=1) }
# search part 2
if (!("pubmed_2.csv" %in% list.files())) {
query <- "(coronavirus OR COVID OR SARS*) AND vaccin* AND (trial OR phase) AND 2020/06/02:2020/08/01[crdt]"
pm_download <- batch_pubmed_download(pubmed_query_string = query, encoding = "ASCII")
pm_df2 <- table_articles_byAuth(pubmed_data = pm_download[[1]], included_authors = "first", encoding = "ASCII")
write.csv(pm_df2, "pubmed_2.csv")
} else { pm_df2 = read.csv("pubmed_2.csv", row.names=1) }
# search part 3
if (!("pubmed_3.csv" %in% list.files())) {
query <- "(coronavirus OR COVID OR SARS*) AND vaccin* AND (trial OR phase) AND 2020/08/02:2020/11/01[crdt]"
pm_download <- batch_pubmed_download(pubmed_query_string = query, encoding = "ASCII")
pm_df3 <- table_articles_byAuth(pubmed_data = pm_download[[1]], included_authors = "first", encoding = "ASCII")
write.csv(pm_df3, "pubmed_3.csv")
} else { pm_df3 = read.csv("pubmed_3.csv", row.names=1) }
# search part 4
if (!("pubmed_4.csv" %in% list.files())) {
query <- "(coronavirus OR COVID OR SARS*) AND vaccin* AND (trial OR phase) AND 2020/11/02:2021/03/08[crdt]" ### UPDATE ###
pm_download <- batch_pubmed_download(pubmed_query_string = query, encoding = "ASCII")
pm_df4 <- table_articles_byAuth(pubmed_data = pm_download[[1]], included_authors = "first", encoding = "ASCII")
write.csv(pm_df4, "pubmed_4.csv")
} else { pm_df4 = read.csv("pubmed_4.csv", row.names=1) }
# merge results
pm_df = rbind(pm_df1, pm_df2, pm_df3, pm_df4)
pm_results <- data.frame(
ID = pm_df$pmid,
title = pm_df$title,
abstract = pm_df$abstract,
date = paste0(pm_df$year,"-",pm_df$month,"-",pm_df$day),
doi = pm_df$doi,
author_corresponding = paste(pm_df$firstname,pm_df$lastname),
author_corresponding_institution = pm_df$address,
source = "pubmed"
)
# collate results
collated = rbind(mx_reduced, pm_results)
write.csv(collated, "pre_abstract_screening_08Mar2021_full.csv")  ### UPDATE ###
#system("rm pubmed_*")
#system("rm mx_reduced*")
#system("rm easyPubMed_data_01.txt*")
sum(collated$source=="pubmed")
sum(collated$source=="medrxiv")
# load packages
library(easyPubMed)
library(dplyr)
library(formattable)
library(medrxivr)
# search medrxiv
if (!("mx_reduced.csv" %in% list.files())) {
term1 <- c("[Cc]oronavirus","COVID*","SARS*") # OR
term2 <- c("[Vv]accin*") # OR
term3 <- c("[Tt]rial", "[Pp]hase") # OR
query <- list(term1, term2, term3) # AND
mx_results <- mx_search(data = mx_snapshot(), query = query, from_date = "2020-01-01", to_date = "2021-03-08") ### UPDATE ###
mx_reduced = mx_results %>% select(c(ID, title, abstract, date, doi, author_corresponding,
author_corresponding_institution))
mx_reduced$source = "medrxiv"
write.csv(mx_reduced, "mx_reduced.csv")
} else { mx_reduced = read.csv("mx_reduced.csv", row.names=1) }
# search pubmed
if (!("pubmed_1.csv" %in% list.files())) {
query <- "(coronavirus OR COVID OR SARS*) AND vaccin* AND (trial OR phase) AND 2020/01/01:2020/06/01[crdt]"
pm_download <- batch_pubmed_download(pubmed_query_string = query, encoding = "ASCII")
pm_df1 <- table_articles_byAuth(pubmed_data = pm_download[[1]], included_authors = "first", encoding = "ASCII")
write.csv(pm_df1, "pubmed_1.csv")
} else { pm_df1 = read.csv("pubmed_1.csv", row.names=1) }
# search part 2
if (!("pubmed_2.csv" %in% list.files())) {
query <- "(coronavirus OR COVID OR SARS*) AND vaccin* AND (trial OR phase) AND 2020/06/02:2020/08/01[crdt]"
pm_download <- batch_pubmed_download(pubmed_query_string = query, encoding = "ASCII")
pm_df2 <- table_articles_byAuth(pubmed_data = pm_download[[1]], included_authors = "first", encoding = "ASCII")
write.csv(pm_df2, "pubmed_2.csv")
} else { pm_df2 = read.csv("pubmed_2.csv", row.names=1) }
# search part 3
if (!("pubmed_3.csv" %in% list.files())) {
query <- "(coronavirus OR COVID OR SARS*) AND vaccin* AND (trial OR phase) AND 2020/08/02:2020/11/01[crdt]"
pm_download <- batch_pubmed_download(pubmed_query_string = query, encoding = "ASCII")
pm_df3 <- table_articles_byAuth(pubmed_data = pm_download[[1]], included_authors = "first", encoding = "ASCII")
write.csv(pm_df3, "pubmed_3.csv")
} else { pm_df3 = read.csv("pubmed_3.csv", row.names=1) }
# search part 4
if (!("pubmed_4.csv" %in% list.files())) {
query <- "(coronavirus OR COVID OR SARS*) AND vaccin* AND (trial OR phase) AND 2020/11/02:2021/03/08[crdt]" ### UPDATE ###
pm_download <- batch_pubmed_download(pubmed_query_string = query, encoding = "ASCII")
pm_df4 <- table_articles_byAuth(pubmed_data = pm_download[[1]], included_authors = "first", encoding = "ASCII")
write.csv(pm_df4, "pubmed_4.csv")
} else { pm_df4 = read.csv("pubmed_4.csv", row.names=1) }
# merge results
pm_df = rbind(pm_df1, pm_df2, pm_df3, pm_df4)
pm_results <- data.frame(
ID = pm_df$pmid,
title = pm_df$title,
abstract = pm_df$abstract,
date = paste0(pm_df$year,"-",pm_df$month,"-",pm_df$day),
doi = pm_df$doi,
author_corresponding = paste(pm_df$firstname,pm_df$lastname),
author_corresponding_institution = pm_df$address,
source = "pubmed"
)
# collate results
collated = rbind(mx_reduced, pm_results)
write.csv(collated, "pre_abstract_screening_08Mar2021_full.csv")  ### UPDATE ###
#system("rm pubmed_*")
#system("rm mx_reduced*")
#system("rm easyPubMed_data_01.txt*")
